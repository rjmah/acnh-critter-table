{"version":3,"sources":["Utility/constants.js","Reducer/index.js","Reducer/actionTypes.js","Components/control-elements/hemisphere-control.jsx","Components/control-elements/hour-format-control.jsx","Components/control-elements/export-state.jsx","Components/control-elements/import-state.jsx","Components/more-controls-modal.jsx","Components/control-elements/more-controls-trigger.jsx","Components/control-elements/search-input.jsx","Components/control-elements/active-month-control.jsx","Components/control-elements/hide-caught-control.jsx","Components/control-elements/availibility-control.jsx","Components/control-elements/critter-type-control.jsx","Components/controls.jsx","Data/formatted-data.js","Components/cells/caught-cell.jsx","Components/cells/header-cell.jsx","Components/cells/picture-cell.jsx","Components/cells/month-cell.jsx","Components/cells/time-cell.jsx","useInterval.js","Components/status-bar.jsx","Components/critter-table.jsx","App.jsx","serviceWorker.js","index.js"],"names":["n","MONTHS","FULL_DAY_ARRAY","Array","keys","d","Date","BOOT_CURRENT_MONTH_INDEX","getMonth","BOOT_CURRENT_HOUR_INDEX","getHours","BOOT_CURRENT_MINUTE_INDEX","getMinutes","StateContext","React","createContext","DispatchContext","lzSavedState","localStorage","getItem","savedStateString","LZString","decompressFromBase64","savedState","JSON","parse","initialFilterState","hideCaught","monthFilter","typeFilter","searchValue","sortColumn","sortDirection","initialState","caughtCritter","timeFormat","hemisphereFilter","storageValue","previewMonthIndex","reducer","previousState","state","type","payload","previousSortColumn","previousSortDirection","appState","newStorageValue","compressToBase64","stringify","setItem","memo","dispatch","useContext","handleChange","useCallback","e","target","value","style","display","flexDirection","p","htmlFor","hyphens","id","name","onChange","key","ExportState","inputRef","useRef","padding","borderRadius","onSelect","inputElem","current","setSelectionRange","length","ref","readOnly","ImportState","useState","importInputText","setImportInputText","handleClick","alert","paddingRight","flex","placeholder","marginLeft","bg","fontWeight","onClick","MoreControlsModal","closeModal","getLegendCell","emoji","text","alignItems","flexGrow","activeHourText","useMemo","notActiveHourText","activeMonthText","expiringMonthText","notActiveMonthText","Fragment","className","marginTop","marginBottom","color","fontSize","width","cursor","position","role","aria-label","textAlign","MoreControlsTrigger","isModalOpen","setIsModalOpen","openModal","variant","marginRight","lineHeight","isClearButtonShown","m","optionValue","parseInt","undefined","map","month","i","isChecked","justifyContent","checked","classNames","select_is_active","select_is_expiring","flexWrap","paddingBottom","getNLengthArray","fishData","require","bugData","FULL_YEAR_SET","Set","FULL_DAY_SET","formatTime12","hourIndex","number","suffix","formatTime24","toString","padStart","calculateActiveMonths","monthTuples","isSouth","activeMonths","forEach","start","end","add","formattedData","rowData","concat","timeTuples","time","rest","activeMonthsNorth","activeMonthsSouth","activeHours","activeHoursText12","activeHoursText24","push","caughtKey","isCaught","label","sortKey","headerStyle","sortIcon","src","process","alt","has","activeHoursText","currentHour","currentMinute","hour","left","Math","floor","useInterval","callback","delay","savedCallback","useEffect","setInterval","clearInterval","StatusBar","count","hemisphere","handleClickReset","paddingLeft","currentMonth","setCurrentMonth","setCurrentHour","setCurrentMinute","updateCurrentTime","window","addEventListener","removeEventListener","isCurrentMonthActive","isCurrentMonthExpiring","monthIndex","nextMonthIndex","getNextMonthIndex","isCurrentTimeActive","localeAwareData","tableData","filter","location","displayed","toLowerCase","includes","sortFn","a","b","isAsc","aVal","bVal","sortedTableData","sort","getRowClassName","index","currentMonthActive","currentMonthExpiring","currentTimeActive","cell_month_active","cell_month_expiring","cell_month_inactive","caughtRenderer","pictureRenderer","timeRenderer","monthRenderer","priceRenderer","toLocaleString","columns","renderer","cellRenderer","columnIndex","rowIndex","contents","cell_first","cell_padded","getColumnWidth","getRowHeight","height","enableFixedRowScroll","fixedRowCount","columnWidth","columnCount","rowHeight","rowCount","hideTopRightGridScrollbar","hideBottomLeftGridScrollbar","overscanColumnCount","onRowsRendered","App","useReducer","Provider","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a2e69301.chunk.js","sourcesContent":["export const MONTHS = [\n  'Jan.',\n  'Feb.',\n  'Mar.',\n  'Apr.',\n  'May',\n  'June',\n  'July',\n  'Aug.',\n  'Sept.',\n  'Oct.',\n  'Nov.',\n  'Dec.',\n];\n\nconst getNLengthArray = (n) => [...Array(n).keys()];\nexport const FULL_DAY_ARRAY = getNLengthArray(24);\n\nvar d = new Date();\nexport const BOOT_CURRENT_MONTH_INDEX = d.getMonth();\nexport const BOOT_CURRENT_HOUR_INDEX = d.getHours();\nexport const BOOT_CURRENT_MINUTE_INDEX = d.getMinutes();\nexport const MONTH_FILTER_ACTIVE = 'MONTH_FILTER_ACTIVE';\nexport const MONTH_FILTER_EXPIRING = 'MONTH_FILTER_EXPIRING';\nexport const TYPE_FILTER_FISH = 'TYPE_FILTER_FISH';\nexport const TYPE_FILTER_BUGS = 'TYPE_FILTER_BUGS';\n\nexport const HEMISPHERE_FILTER_NORTHERN = 'HEMISPHERE_FILTER_NORTHERN';\nexport const HEMISPHERE_FILTER_SOUTHERN = 'HEMISPHERE_FILTER_SOUTHERN';\n\nexport const TIME_FORMAT_12 = 'TIME_FORMAT_12';\nexport const TIME_FORMAT_24 = 'TIME_FORMAT_24';\n","import React from 'react';\nimport LZString from 'lz-string';\n\nimport {\n  CHANGE_PREVIEW_MONTH,\n  TOGGLE_CRITTER_CAUGHT,\n  TOGGLE_HIDE_CAUGHT,\n  CHANGE_MONTH_FILTER,\n  CHANGE_TYPE_FILTER,\n  CHANGE_HEMISPHERE,\n  SEARCH,\n  CHANGE_TIME_FORMAT,\n  IMPORT_STATE,\n  FILTER_RESET,\n  SORT_COLUMN,\n} from './actionTypes';\nimport {\n  BOOT_CURRENT_MONTH_INDEX,\n  HEMISPHERE_FILTER_NORTHERN,\n  TIME_FORMAT_12,\n} from 'Utility/constants';\n\nexport const StateContext = React.createContext();\nexport const DispatchContext = React.createContext();\n\nconst lzSavedState = localStorage.getItem('acnh_store_lz');\n\nconst savedStateString = lzSavedState\n  ? LZString.decompressFromBase64(lzSavedState)\n  : localStorage.getItem('acnh_store');\nconst savedState = JSON.parse(savedStateString) || {};\n\nconst initialFilterState = {\n  hideCaught: false,\n  monthFilter: '',\n  typeFilter: '',\n  searchValue: '',\n  sortColumn: '',\n  sortDirection: 0,\n};\nexport const initialState = {\n  // previewMonthIndex: BOOT_CURRENT_MONTH_INDEX,\n  caughtCritter: {},\n  ...initialFilterState,\n  timeFormat: TIME_FORMAT_12,\n  hemisphereFilter: HEMISPHERE_FILTER_NORTHERN,\n  storageValue: localStorage.getItem('acnh_store_lz'),\n  ...savedState,\n  // TODO: Don't reset the preview month from persisted store, since it's pretty confusing when you land on the wrong month after coming back\n  // Maybe can be solved be adding styles to denote you're previewing a month in the future\n  previewMonthIndex: BOOT_CURRENT_MONTH_INDEX,\n};\n\nexport function reducer(previousState, { type, payload }) {\n  let state;\n  switch (type) {\n    case FILTER_RESET: {\n      state = {\n        ...previousState,\n        previewMonthIndex: BOOT_CURRENT_MONTH_INDEX,\n        ...initialFilterState,\n      };\n      break;\n    }\n    case IMPORT_STATE:\n      state = JSON.parse(LZString.decompressFromBase64(payload));\n      break;\n    case CHANGE_PREVIEW_MONTH: {\n      state = { ...previousState, previewMonthIndex: payload };\n      break;\n    }\n    case TOGGLE_CRITTER_CAUGHT: {\n      //TODO maybe use thunks. So logic isn't in the reducer\n      const caughtCritter = { ...previousState.caughtCritter };\n      if (previousState.caughtCritter[payload]) {\n        delete caughtCritter[payload];\n      } else {\n        caughtCritter[payload] = true;\n      }\n      //TODO maybe throttle this with thunks\n      state = { ...previousState, caughtCritter };\n      break;\n    }\n    case TOGGLE_HIDE_CAUGHT: {\n      state = { ...previousState, hideCaught: !previousState.hideCaught };\n      break;\n    }\n    case CHANGE_MONTH_FILTER: {\n      state = { ...previousState, monthFilter: payload };\n      break;\n    }\n    case CHANGE_TYPE_FILTER: {\n      state = { ...previousState, typeFilter: payload };\n      break;\n    }\n    case CHANGE_HEMISPHERE: {\n      state = { ...previousState, hemisphereFilter: payload };\n      break;\n    }\n    case SEARCH: {\n      state = { ...previousState, searchValue: payload };\n      break;\n    }\n    case CHANGE_TIME_FORMAT: {\n      state = { ...previousState, timeFormat: payload };\n      break;\n    }\n    case SORT_COLUMN: {\n      const {\n        sortColumn: previousSortColumn,\n        sortDirection: previousSortDirection,\n      } = previousState;\n\n      /**\n       * 0 === unfiltered\n       * 1 === asc\n       * 2 === desc\n       */\n      const sortDirection =\n        previousSortColumn === payload ? (previousSortDirection + 1) % 3 : 1;\n\n      state = { ...previousState, sortColumn: payload, sortDirection };\n      break;\n    }\n    default:\n      state = previousState;\n  }\n\n  if (state !== previousState) {\n    const { storageValue, ...appState } = state;\n    const newStorageValue = LZString.compressToBase64(JSON.stringify(appState));\n    // Save storage value on state to share with export component\n    state.storageValue = newStorageValue;\n    localStorage.setItem('acnh_store_lz', newStorageValue);\n  }\n  return state;\n}\n","export const CHANGE_PREVIEW_MONTH = 'CHANGE_PREVIEW_MONTH';\nexport const TOGGLE_CRITTER_CAUGHT = 'TOGGLE_CRITTER_CAUGHT';\nexport const TOGGLE_HIDE_CAUGHT = 'TOGGLE_HIDE_CAUGHT';\nexport const CHANGE_MONTH_FILTER = 'CHANGE_MONTH_FILTER';\nexport const CHANGE_TYPE_FILTER = 'CHANGE_TYPE_FILTER';\nexport const CHANGE_HEMISPHERE = 'CHANGE_HEMISPHERE';\nexport const SEARCH = 'SEARCH';\nexport const CHANGE_TIME_FORMAT = 'CHANGE_TIME_FORMAT';\nexport const IMPORT_STATE = 'IMPORT_STATE';\nexport const FILTER_RESET = 'FILTER_RESET';\nexport const SORT_COLUMN = 'SORT_COLUMN';\n","import React, { useContext, useCallback } from 'react';\nimport { DispatchContext, StateContext } from 'Reducer';\nimport { CHANGE_HEMISPHERE } from 'Reducer/actionTypes';\nimport { Label, Select } from '@rebass/forms';\nimport {\n  HEMISPHERE_FILTER_NORTHERN,\n  HEMISPHERE_FILTER_SOUTHERN,\n} from 'Utility/constants';\n\nfunction HemisphereControl() {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const handleChange = useCallback(\n    (e) => {\n      dispatch({ type: CHANGE_HEMISPHERE, payload: e.target.value });\n    },\n    [dispatch]\n  );\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <Label p={1} htmlFor=\"hemisphere_filter\" style={{ hyphens: 'auto' }}>\n        Hemisphere\n      </Label>\n      <Select\n        id=\"hemisphere_filter\"\n        name=\"Hemisphere Filter\"\n        value={state.hemisphereFilter}\n        onChange={handleChange}\n      >\n        <option key=\"active\" value={HEMISPHERE_FILTER_NORTHERN}>\n          Northern\n        </option>\n        <option key=\"expiring\" value={HEMISPHERE_FILTER_SOUTHERN}>\n          Southern\n        </option>\n      </Select>\n    </div>\n  );\n}\n\nexport default React.memo(HemisphereControl);\n","import React, { useContext, useCallback } from 'react';\nimport { DispatchContext, StateContext } from 'Reducer';\nimport { CHANGE_TIME_FORMAT } from 'Reducer/actionTypes';\nimport { Label, Select } from '@rebass/forms';\nimport { TIME_FORMAT_12, TIME_FORMAT_24 } from 'Utility/constants';\n\nfunction HourFormatControl() {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const handleChange = useCallback(\n    (e) => {\n      dispatch({ type: CHANGE_TIME_FORMAT, payload: e.target.value });\n    },\n    [dispatch]\n  );\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <Label p={1} htmlFor=\"time_format_select\">\n        Time Format\n      </Label>\n      <Select\n        id=\"time_format_select\"\n        name=\"Time Format\"\n        value={state.timeFormat}\n        onChange={handleChange}\n      >\n        <option key=\"12 hour\" value={TIME_FORMAT_12}>\n          AM / PM\n        </option>\n        <option key=\"24 hour\" value={TIME_FORMAT_24}>\n          24 hour\n        </option>\n      </Select>\n    </div>\n  );\n}\n\nexport default React.memo(HourFormatControl);\n","import React, { useRef, useContext } from 'react';\n\nimport { Input, Label } from '@rebass/forms';\nimport { StateContext } from 'Reducer';\n\nfunction ExportState() {\n  const inputRef = useRef();\n  const state = useContext(StateContext);\n\n  return (\n    <div>\n      <Label padding={1} htmlFor=\"export_state_input\">\n        Export State (Copy for other device)\n      </Label>\n      <Input\n        id=\"export_state_input\"\n        style={{ borderRadius: 5 }}\n        onSelect={() => {\n          const inputElem = inputRef?.current;\n          if (inputElem) {\n            inputElem.setSelectionRange(0, inputElem.value.length);\n          }\n        }}\n        ref={inputRef}\n        value={state.storageValue}\n        readOnly\n      />\n    </div>\n  );\n}\n\nexport default ExportState;\n","import React, { useState, useCallback, useContext } from 'react';\nimport LZString from 'lz-string';\n\nimport { Label, Input } from '@rebass/forms';\nimport { Flex, Box, Button } from 'rebass';\nimport { DispatchContext } from 'Reducer';\nimport { IMPORT_STATE } from 'Reducer/actionTypes';\n\nfunction ImportState() {\n  const dispatch = useContext(DispatchContext);\n  const [importInputText, setImportInputText] = useState('');\n\n  const handleChange = useCallback((e) => {\n    setImportInputText(e.target.value);\n  }, []);\n\n  const handleClick = useCallback(() => {\n    // Validate that string decompresses to JSON\n    try {\n      JSON.parse(LZString.decompressFromBase64(importInputText));\n    } catch (e) {\n      alert('Invalid string provided. String decompresses to invalid JSON.');\n    }\n\n    dispatch({ type: IMPORT_STATE, payload: importInputText });\n  }, [dispatch, importInputText]);\n\n  return (\n    <div>\n      <Label padding={1} htmlFor=\"import_state_input\">\n        Import State (Paste from other device)\n      </Label>\n      <Flex>\n        <Box paddingRight={1} flex=\"1 1 auto\">\n          <Input\n            id=\"import_state_input\"\n            placeholder=\"From other device...\"\n            style={{ borderRadius: 5 }}\n            onChange={handleChange}\n            value={importInputText}\n          />\n        </Box>\n        <Box marginLeft={1}>\n          <Button\n            bg=\"rgb(51, 152, 247)\"\n            style={{ fontWeight: 600 }}\n            onClick={handleClick}\n          >\n            Import\n          </Button>\n        </Box>\n      </Flex>\n    </div>\n  );\n}\n\nexport default ImportState;\n","import React, { useMemo, useCallback } from 'react';\nimport { Button, Flex, Box } from 'rebass';\n\nimport ToggleHemisphere from './control-elements/hemisphere-control';\nimport ToggleTimeFormat from './control-elements/hour-format-control';\nimport ExportState from './control-elements/export-state';\nimport ImportState from './control-elements/import-state';\n\nfunction MoreControlsModal({ closeModal }) {\n  const getLegendCell = useCallback(\n    (emoji, text) => (\n      <Box>\n        <Flex alignItems=\"center\">\n          <Box>{emoji}</Box>\n          <Box flexGrow={1}>{text}</Box>\n        </Flex>\n      </Box>\n    ),\n    []\n  );\n  const activeHourText = useMemo(\n    () => getLegendCell('✅⏱', 'Available at this hour'),\n    [getLegendCell]\n  );\n  const notActiveHourText = useMemo(\n    () => getLegendCell('❌⏱', 'Not available at this hour'),\n    [getLegendCell]\n  );\n\n  const activeMonthText = useMemo(\n    () => getLegendCell('✅📅', 'Available in active month'),\n    [getLegendCell]\n  );\n  const expiringMonthText = useMemo(\n    () => getLegendCell('⌛️📅', 'Expiring at end of active month'),\n    [getLegendCell]\n  );\n  const notActiveMonthText = useMemo(\n    () => getLegendCell('❌📅', 'Not available in active month'),\n    [getLegendCell]\n  );\n  return (\n    <React.Fragment>\n      <div className=\"more_controls_modal_overlay\" onClick={closeModal} />\n      <div className=\"more_controls_modal\">\n        <Flex\n          padding={3}\n          flexDirection=\"column\"\n          marginTop={20}\n          marginBottom={40}\n        >\n          <Box>\n            <Button\n              padding={0}\n              onClick={closeModal}\n              color=\"black\"\n              bg=\"lightgray\"\n              fontSize={25}\n              width={30}\n              marginTop={-30}\n              style={{ cursor: 'pointer', position: 'fixed' }}\n            >\n              <span role=\"img\" aria-label=\"close\">\n                ✖️\n              </span>\n            </Button>\n          </Box>\n          <Box>\n            <ToggleHemisphere />\n          </Box>\n          <Box>\n            <ToggleTimeFormat />\n          </Box>\n          <Box marginTop={20}>\n            <Flex flexDirection=\"column\" textAlign=\"center\">\n              <Box p={2} fontSize={20}>\n                Row Color Legend\n              </Box>\n              <Box p={2} bg=\"#9ce482\">\n                <Flex flexDirection=\"column\">\n                  {activeHourText}\n                  {activeMonthText}\n                </Flex>\n              </Box>\n              <Box p={2} bg=\"#d9ead3\">\n                <Flex flexDirection=\"column\">\n                  {notActiveHourText}\n                  {activeMonthText}\n                </Flex>\n              </Box>\n              <Box p={2} bg=\"#f8e19d\">\n                <Flex flexDirection=\"column\">\n                  {activeHourText}\n                  {expiringMonthText}\n                </Flex>\n              </Box>\n              <Box p={2} bg=\"#fff2cc\">\n                <Flex flexDirection=\"column\">\n                  {notActiveHourText}\n                  {expiringMonthText}\n                </Flex>\n              </Box>\n              <Box p={2} bg=\"#f4cccc\">\n                {notActiveMonthText}\n              </Box>\n            </Flex>\n          </Box>\n          <Box marginTop={20}>\n            <ExportState />\n          </Box>\n          <Box>\n            <ImportState />\n          </Box>\n        </Flex>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default MoreControlsModal;\n","import React, { useCallback, useState } from 'react';\n\nimport { Button } from 'rebass';\nimport MoreControlsModal from '../more-controls-modal';\n\nfunction MoreControlsTrigger() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const openModal = useCallback(() => {\n    setIsModalOpen(true);\n  }, []);\n\n  const closeModal = useCallback(() => {\n    setIsModalOpen(false);\n  }, []);\n\n  return (\n    <React.Fragment>\n      <Button\n        padding={1}\n        variant=\"outline\"\n        bg=\"white\"\n        color=\"black\"\n        width={30}\n        fontSize={25}\n        marginRight={1}\n        lineHeight={1}\n        onClick={openModal}\n        style={{ cursor: 'pointer' }}\n      >\n        ☰\n      </Button>\n      {isModalOpen && <MoreControlsModal closeModal={closeModal} />}\n    </React.Fragment>\n  );\n}\n\nexport default MoreControlsTrigger;\n","import React, { useContext, useCallback, useMemo } from 'react';\nimport { DispatchContext, StateContext } from 'Reducer';\nimport { SEARCH } from 'Reducer/actionTypes';\nimport { Button } from 'rebass';\nimport { Input } from '@rebass/forms';\n\nfunction SearchInput() {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const handleChange = useCallback(\n    (e) => {\n      dispatch({ type: SEARCH, payload: e.target.value });\n    },\n    [dispatch]\n  );\n\n  const handleClick = useCallback(\n    (e) => {\n      dispatch({ type: SEARCH, payload: '' });\n    },\n    [dispatch]\n  );\n  const isClearButtonShown = useMemo(() => !!state.searchValue, [\n    state.searchValue,\n  ]);\n\n  return (\n    <div className=\"search\">\n      <Input\n        m={1 / 2}\n        id=\"search\"\n        name=\"search\"\n        style={{ borderRadius: 5, marginRight: 1 }}\n        value={state.searchValue}\n        onChange={handleChange}\n        placeholder=\"Search name or location\"\n      />\n      {isClearButtonShown && (\n        <Button className=\"search__clear_button\" p={0} onClick={handleClick}>\n          <span role=\"img\" aria-label=\"clear search\">\n            ✖️\n          </span>\n        </Button>\n      )}\n    </div>\n  );\n}\n\nexport default React.memo(SearchInput);\n","import React, { useMemo, useContext, useCallback } from 'react';\nimport { DispatchContext, StateContext } from 'Reducer';\nimport { CHANGE_PREVIEW_MONTH } from 'Reducer/actionTypes';\nimport { Label, Select } from '@rebass/forms';\nimport { BOOT_CURRENT_MONTH_INDEX, MONTHS } from 'Utility/constants';\n\nfunction ActiveMonthControl() {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const handleChange = useCallback(\n    (e) => {\n      const optionValue = e.target.value;\n      const payload = optionValue === '' ? null : parseInt(optionValue, 10);\n      dispatch({ type: CHANGE_PREVIEW_MONTH, payload });\n    },\n    [dispatch]\n  );\n\n  const value = useMemo(() => state.previewMonthIndex, [\n    state.previewMonthIndex,\n  ]);\n\n  return (\n    <div>\n      <Label p={1} htmlFor=\"active_month\">\n        Month\n      </Label>\n      <Select\n        fontWeight={\n          state.previewMonthIndex === BOOT_CURRENT_MONTH_INDEX ? 800 : undefined\n        }\n        id=\"active_month\"\n        name=\"Active Month\"\n        value={value}\n        onChange={handleChange}\n      >\n        {MONTHS.map((month, i) => (\n          <option key={i} value={i}>\n            {month}\n          </option>\n        ))}\n        ))}\n      </Select>\n    </div>\n  );\n}\n\nexport default React.memo(ActiveMonthControl);\n","import React, { useMemo, useContext, useCallback } from 'react';\nimport { DispatchContext, StateContext } from 'Reducer';\nimport { Label, Switch } from '@rebass/forms';\nimport { TOGGLE_HIDE_CAUGHT } from 'Reducer/actionTypes';\nimport { Flex } from 'rebass';\n\nfunction HideCaughtControl() {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const handleClick = useCallback(() => {\n    dispatch({ type: TOGGLE_HIDE_CAUGHT });\n  }, [dispatch]);\n\n  const isChecked = useMemo(() => state.hideCaught, [state.hideCaught]);\n  return (\n    <Flex className=\"toggle_caught_container\">\n      <Label padding={1} htmlFor=\"hide_caught\">\n        Hide{' '}\n        <span role=\"img\" aria-label=\"checked\">\n          ☑️\n        </span>\n      </Label>\n      <Flex justifyContent=\"center\" flexDirection=\"column\" flexGrow={1}>\n        <Switch id=\"hide_caught\" checked={isChecked} onClick={handleClick} />\n      </Flex>\n    </Flex>\n  );\n}\n\nexport default React.memo(HideCaughtControl);\n","import React, { useContext, useCallback } from 'react';\nimport classNames from 'classnames';\nimport { DispatchContext, StateContext } from 'Reducer';\nimport { CHANGE_MONTH_FILTER } from 'Reducer/actionTypes';\nimport { Label, Select } from '@rebass/forms';\nimport { MONTH_FILTER_ACTIVE, MONTH_FILTER_EXPIRING } from 'Utility/constants';\n\nfunction AvailibilityControl() {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const handleChange = useCallback(\n    (e) => {\n      dispatch({ type: CHANGE_MONTH_FILTER, payload: e.target.value });\n    },\n    [dispatch]\n  );\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <Label p={1} htmlFor=\"month_filter\">\n        Availability\n      </Label>\n      <Select\n        className={classNames({\n          select_is_active: state.monthFilter === MONTH_FILTER_ACTIVE,\n          select_is_expiring: state.monthFilter === MONTH_FILTER_EXPIRING,\n        })}\n        id=\"month_filter\"\n        name=\"Month Filter\"\n        value={state.monthFilter}\n        onChange={handleChange}\n      >\n        <option key=\"all\" value=\"\">\n          All\n        </option>\n        <option key=\"active\" value={MONTH_FILTER_ACTIVE}>\n          Active\n        </option>\n        <option key=\"expiring\" value={MONTH_FILTER_EXPIRING}>\n          Expiring\n        </option>\n      </Select>\n    </div>\n  );\n}\n\nexport default React.memo(AvailibilityControl);\n","import React, { useContext, useCallback } from 'react';\nimport { DispatchContext, StateContext } from 'Reducer';\nimport { CHANGE_TYPE_FILTER } from 'Reducer/actionTypes';\nimport { Label, Select } from '@rebass/forms';\nimport { TYPE_FILTER_FISH, TYPE_FILTER_BUGS } from 'Utility/constants';\n\nfunction CritterTypeControl() {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const handleChange = useCallback(\n    (e) => {\n      dispatch({ type: CHANGE_TYPE_FILTER, payload: e.target.value });\n    },\n    [dispatch]\n  );\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <Label p={1} htmlFor=\"type_filter\">\n        Type\n      </Label>\n      <Select\n        id=\"type_filter\"\n        name=\"Type Filter\"\n        value={state.typeFilter}\n        onChange={handleChange}\n      >\n        <option key=\"all\" value=\"\">\n          All\n        </option>\n        <option key=\"active\" value={TYPE_FILTER_FISH}>\n          Fish\n        </option>\n        <option key=\"expiring\" value={TYPE_FILTER_BUGS}>\n          Bugs\n        </option>\n      </Select>\n    </div>\n  );\n}\n\nexport default React.memo(CritterTypeControl);\n","import React from 'react';\nimport { Flex, Box } from 'rebass';\nimport MoreControlsTrigger from './control-elements/more-controls-trigger';\nimport SearchInput from './control-elements/search-input';\nimport ActiveMonthControl from './control-elements/active-month-control';\nimport HideCaughtControl from './control-elements/hide-caught-control';\nimport AvailibilityControl from './control-elements/availibility-control';\nimport CritterTypeControl from './control-elements/critter-type-control';\n\nfunction Controls() {\n  return (\n    <Flex flexWrap=\"wrap\" width=\"100%\">\n      <Box paddingBottom={0} width={[1]}>\n        <Flex>\n          <Box>\n            <MoreControlsTrigger />\n          </Box>\n          <Box flex=\"1 1 auto\">\n            <SearchInput />\n          </Box>\n        </Flex>\n      </Box>\n      <Box paddingRight={1} width={[1 / 4]}>\n        <ActiveMonthControl />\n      </Box>\n      <Box paddingRight={1} width={[1 / 4]}>\n        <HideCaughtControl />\n      </Box>\n      <Box paddingRight={2} width={[1 / 4]}>\n        <AvailibilityControl />\n      </Box>\n      <Box width={[1 / 4]}>\n        <CritterTypeControl />\n      </Box>\n    </Flex>\n  );\n}\n\nexport default React.memo(Controls);\n","const getNLengthArray = (n) => [...Array(n).keys()];\n\nconst fishData = require('./fish_data.json');\nconst bugData = require('./bug_data.json');\nconst FULL_YEAR_SET = new Set(getNLengthArray(12));\nconst FULL_DAY_ARRAY = getNLengthArray(24);\nconst FULL_DAY_SET = new Set(FULL_DAY_ARRAY);\n\nfunction formatTime12(hourIndex) {\n  let number = hourIndex % 12;\n  number = number || 12;\n\n  const suffix = hourIndex / 12 < 1 ? 'AM' : 'PM';\n  return `${number}${suffix}`;\n}\n\nfunction formatTime24(hourIndex) {\n  return `${hourIndex.toString().padStart(2, '0')}:00`;\n}\n\nfunction calculateActiveMonths(monthTuples, isSouth) {\n  let activeMonths = new Set();\n  monthTuples.forEach(([start, end]) => {\n    if (start === 0 && end === 11) {\n      activeMonths = FULL_YEAR_SET;\n      return;\n    }\n    if (isSouth) {\n      start = (start + 6) % 12;\n      end = (end + 6) % 12;\n    }\n\n    while (start !== end) {\n      activeMonths.add(start);\n      start = (start + 1) % 12;\n    }\n\n    activeMonths.add(end);\n  });\n\n  return activeMonths;\n}\n\nconst formattedData = fishData\n  .map((rowData) => ({ ...rowData, type: 'fish' }))\n  .concat(bugData.map((rowData) => ({ ...rowData, type: 'bug' })))\n  .map(({ month: monthTuples, time: timeTuples, ...rest }) => {\n    const activeMonthsNorth = calculateActiveMonths(monthTuples, false);\n    const activeMonthsSouth = calculateActiveMonths(monthTuples, true);\n\n    let activeHours = new Set();\n    let activeHoursText12 = [];\n    let activeHoursText24 = [];\n    timeTuples.forEach(([start, end]) => {\n      if (start === end) {\n        activeHours = FULL_DAY_SET;\n        activeHoursText12.push('All Day');\n        activeHoursText24.push('All Day');\n        return;\n      }\n      activeHoursText12.push(`${formatTime12(start)} - ${formatTime12(end)}`);\n      activeHoursText24.push(`${formatTime24(start)} - ${formatTime24(end)}`);\n\n      while (start !== end) {\n        activeHours.add(start);\n        start++;\n        if (start > 23) {\n          start = 0;\n        }\n      }\n      // don't include end for time\n    });\n\n    return {\n      activeMonthsNorth,\n      activeMonthsSouth,\n      activeHours,\n      activeHoursText12,\n      activeHoursText24,\n      ...rest,\n    };\n  });\n\nexport default formattedData;\n","import React, { useMemo, useContext, useCallback } from 'react';\nimport { DispatchContext, StateContext } from 'Reducer';\nimport { TOGGLE_CRITTER_CAUGHT } from 'Reducer/actionTypes';\nimport { Label, Checkbox } from '@rebass/forms';\n\nfunction CaughtCell({ number, type }) {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const caughtKey = useMemo(() => `${type}${number}`, [type, number]);\n\n  const handleChange = useCallback(\n    (e) => {\n      dispatch({ type: TOGGLE_CRITTER_CAUGHT, payload: caughtKey });\n    },\n    [dispatch, caughtKey]\n  );\n  const isCaught = useMemo(() => {\n    return state.caughtCritter[caughtKey];\n  }, [state.caughtCritter, caughtKey]);\n  return (\n    <div>\n      <Label>\n        <Checkbox\n          id={`${type}_caught_${number}`}\n          className=\"caught_checkbox\"\n          checked={isCaught || false}\n          onChange={handleChange}\n        />\n      </Label>\n    </div>\n  );\n}\n\nexport default React.memo(CaughtCell);\n","import React, { useCallback, useContext, useMemo } from 'react';\nimport classNames from 'classnames';\nimport { DispatchContext, StateContext } from 'Reducer';\nimport { SORT_COLUMN } from 'Reducer/actionTypes';\n\nfunction HeaderCell({ className, style, label, sortKey }) {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const handleClick = useCallback(() => {\n    dispatch({ type: SORT_COLUMN, payload: sortKey });\n  }, [dispatch, sortKey]);\n  let headerStyle = { ...style };\n  if (sortKey) {\n    headerStyle.cursor = 'pointer';\n  }\n\n  const sortIcon = useMemo(() => {\n    if (state.sortColumn !== sortKey) return '';\n    if (state.sortDirection === 1) return '↑';\n    if (state.sortDirection === 2) return '↓';\n  }, [sortKey, state.sortColumn, state.sortDirection]);\n  return (\n    <div\n      className={classNames(className, {\n        'header_cell--sortable': sortKey,\n      })}\n      style={headerStyle}\n      onClick={sortKey ? handleClick : undefined}\n    >\n      {label} {sortIcon}\n    </div>\n  );\n}\n\nexport default React.memo(HeaderCell);\n","import React from 'react';\n\nfunction PictureCell({ number, type }) {\n  return (\n    <div>\n      <img\n        src={`${process.env.PUBLIC_URL}/${type}${number\n          .toString()\n          .padStart(2, '0')}.png`}\n        alt=\"\"\n      />\n    </div>\n  );\n}\n\nexport default React.memo(PictureCell);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { MONTHS } from 'Utility/constants';\n\nfunction MonthCell({ activeMonths, previewMonthIndex }) {\n  return (\n    <div className=\"month_container\">\n      {MONTHS.map((month, i) => (\n        <div\n          key={i}\n          className={classNames('month_square', {\n            'month_square--active': activeMonths.has(i),\n            'month_square--current': i === previewMonthIndex,\n          })}\n        >\n          {month}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default React.memo(MonthCell);\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { FULL_DAY_ARRAY } from 'Utility/constants';\n\nfunction TimeCell({\n  activeHours,\n  activeHoursText,\n  currentHour,\n  currentMinute,\n}) {\n  return (\n    <div>\n      <div className=\"hour_container\">\n        {FULL_DAY_ARRAY.map((hour, i) => (\n          <div\n            key={i}\n            className={classNames('hour_square', {\n              'hour_square--active': activeHours.has(i),\n            })}\n          />\n        ))}\n        <div\n          className=\"hour_container__current_time_marker\"\n          style={{\n            left: 4 * currentHour + Math.floor(currentMinute / 15),\n          }}\n        />\n      </div>\n      <div className=\"hour_text\">\n        {activeHoursText.map((text, i) => (\n          <div key={i} className=\"hour_text__entry\">\n            {text}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(TimeCell);\n","import { useEffect, useRef } from 'react';\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;\n","import React, { useCallback, useContext } from 'react';\nimport { Flex, Box, Button } from 'rebass';\nimport { DispatchContext } from 'Reducer';\nimport { FILTER_RESET } from 'Reducer/actionTypes';\n\nfunction StatusBar({ count = 0, hemisphere = 'Northern' }) {\n  const dispatch = useContext(DispatchContext);\n\n  const handleClickReset = useCallback(() => {\n    dispatch({ type: FILTER_RESET });\n  }, [dispatch]);\n\n  return (\n    <Flex\n      marginTop={1}\n      marginBottom={1}\n      fontSize={13}\n      justifyContent=\"space-between\"\n      className=\"status_bar\"\n      alignItems=\"center\"\n    >\n      <Box>\n        Count: <b>{count}</b>\n      </Box>\n      <Box>\n        Hemisphere: <b>{hemisphere}</b>\n      </Box>\n      <Box>\n        <Button\n          bg=\"rgb(51, 152, 247)\"\n          p={1}\n          paddingLeft={1}\n          paddingRight={1}\n          onClick={handleClickReset}\n          style={{ cursor: 'pointer', fontWeight: 600 }}\n        >\n          Reset Filters\n        </Button>\n      </Box>\n    </Flex>\n  );\n}\n\nexport default StatusBar;\n","import React, {\n  useState,\n  useContext,\n  useMemo,\n  useCallback,\n  useEffect,\n} from 'react';\nimport { AutoSizer, MultiGrid } from 'react-virtualized';\nimport classNames from 'classnames';\nimport formattedData from 'Data/formatted-data';\n\nimport { StateContext, DispatchContext } from 'Reducer';\nimport {\n  BOOT_CURRENT_MONTH_INDEX,\n  BOOT_CURRENT_HOUR_INDEX,\n  BOOT_CURRENT_MINUTE_INDEX,\n  MONTH_FILTER_ACTIVE,\n  MONTH_FILTER_EXPIRING,\n  TYPE_FILTER_FISH,\n  TYPE_FILTER_BUGS,\n  HEMISPHERE_FILTER_NORTHERN,\n  TIME_FORMAT_12,\n} from 'Utility/constants';\nimport CaughtCell from './cells/caught-cell';\nimport HeaderCell from './cells/header-cell';\nimport PictureCell from './cells/picture-cell';\nimport MonthCell from './cells/month-cell';\nimport TimeCell from './cells/time-cell';\nimport useInterval from 'useInterval';\nimport { CHANGE_PREVIEW_MONTH } from 'Reducer/actionTypes';\nimport StatusBar from './status-bar';\n\nfunction getNextMonthIndex(monthIndex) {\n  let nextMonthIndex = monthIndex + 1;\n  if (nextMonthIndex > 11) nextMonthIndex = 0;\n  return nextMonthIndex;\n}\n\nfunction CritterTable() {\n  const state = useContext(StateContext);\n  const dispatch = useContext(DispatchContext);\n  const [currentMonth, setCurrentMonth] = useState(BOOT_CURRENT_MONTH_INDEX);\n  const [currentHour, setCurrentHour] = useState(BOOT_CURRENT_HOUR_INDEX);\n  const [currentMinute, setCurrentMinute] = useState(BOOT_CURRENT_MINUTE_INDEX);\n\n  const updateCurrentTime = useCallback(() => {\n    var d = new Date();\n    setCurrentMonth(d.getMonth());\n    setCurrentHour(d.getHours());\n    setCurrentMinute(d.getMinutes());\n  }, []);\n\n  // Update active month if month changes when app is open\n  useEffect(() => {\n    if (\n      state.previewMonthIndex === BOOT_CURRENT_MONTH_INDEX &&\n      currentMonth !== BOOT_CURRENT_MONTH_INDEX\n    ) {\n      dispatch({ type: CHANGE_PREVIEW_MONTH, payload: currentMonth });\n    }\n  }, [currentMonth, dispatch, state.previewMonthIndex]);\n\n  // Every minute, check current time to update the time graph\n  useInterval(updateCurrentTime, 60000);\n\n  // Check current time when window gains focus, since interval doesn't run in the background\n  useEffect(() => {\n    window.addEventListener('focus', updateCurrentTime);\n    return () => window.removeEventListener('focus', updateCurrentTime);\n  }, [updateCurrentTime]);\n\n  const isCurrentMonthActive = useCallback(\n    (activeMonths) => activeMonths.has(state.previewMonthIndex),\n    [state.previewMonthIndex]\n  );\n\n  const isCurrentMonthExpiring = useCallback(\n    (activeMonths) =>\n      activeMonths.has(state.previewMonthIndex) &&\n      !activeMonths.has(getNextMonthIndex(state.previewMonthIndex)),\n    [state.previewMonthIndex]\n  );\n\n  const isCurrentTimeActive = useCallback(\n    (activeHours) => activeHours.has(currentHour),\n    [currentHour]\n  );\n  const localeAwareData = useMemo(\n    () =>\n      formattedData.map(\n        ({\n          activeMonthsNorth,\n          activeMonthsSouth,\n          activeHoursText12,\n          activeHoursText24,\n          ...rest\n        }) => ({\n          ...rest,\n          activeMonths:\n            state.hemisphereFilter === HEMISPHERE_FILTER_NORTHERN\n              ? activeMonthsNorth\n              : activeMonthsSouth,\n          activeHoursText:\n            state.timeFormat === TIME_FORMAT_12\n              ? activeHoursText12\n              : activeHoursText24,\n        })\n      ),\n    [state.hemisphereFilter, state.timeFormat]\n  );\n\n  const tableData = useMemo(() => {\n    const filteredData = localeAwareData.filter(\n      ({ activeMonths, number, type, name, location }) => {\n        let displayed = true;\n        if (displayed && state.searchValue) {\n          displayed =\n            name.toLowerCase().includes(state.searchValue.toLowerCase()) ||\n            location.toLowerCase().includes(state.searchValue.toLowerCase());\n        }\n        if (displayed && state.typeFilter) {\n          if (state.typeFilter === TYPE_FILTER_FISH) {\n            displayed = type === 'fish';\n          } else if (state.typeFilter === TYPE_FILTER_BUGS) {\n            displayed = type === 'bug';\n          }\n        }\n\n        if (displayed && state.monthFilter) {\n          if (state.monthFilter === MONTH_FILTER_ACTIVE) {\n            displayed = isCurrentMonthActive(activeMonths);\n          } else if (state.monthFilter === MONTH_FILTER_EXPIRING) {\n            displayed = isCurrentMonthExpiring(activeMonths);\n          }\n        }\n        if (displayed && state.hideCaught) {\n          displayed = !state.caughtCritter[`${type}${number}`];\n        }\n        return displayed;\n      }\n    );\n    return filteredData;\n  }, [\n    localeAwareData,\n    state.searchValue,\n    state.typeFilter,\n    state.monthFilter,\n    state.hideCaught,\n    state.caughtCritter,\n    isCurrentMonthActive,\n    isCurrentMonthExpiring,\n  ]);\n\n  const sortFn = useCallback(\n    (a, b) => {\n      const isAsc = state.sortDirection === 1;\n      let aVal = a[state.sortColumn];\n      if (typeof aVal === 'string') aVal = aVal.toLowerCase();\n      let bVal = b[state.sortColumn];\n      if (typeof bVal === 'string') bVal = bVal.toLowerCase();\n\n      if (aVal === bVal) return 0;\n\n      if (!aVal) return 1;\n      if (!bVal) return -1;\n\n      if (aVal < bVal) {\n        return isAsc ? -1 : 1;\n      }\n\n      if (aVal > bVal) {\n        return isAsc ? 1 : -1;\n      }\n      return 0;\n    },\n    [state.sortColumn, state.sortDirection]\n  );\n\n  const sortedTableData = useMemo(() => {\n    return state.sortDirection === 0 ? tableData : [...tableData].sort(sortFn);\n  }, [sortFn, state.sortDirection, tableData]);\n\n  const getRowClassName = useCallback(\n    ({ index }) => {\n      if (index < 0) {\n        //header;\n        return 'header_cell';\n      }\n      const currentMonthActive = isCurrentMonthActive(\n        sortedTableData[index]?.activeMonths\n      );\n\n      const currentMonthExpiring = isCurrentMonthExpiring(\n        sortedTableData[index]?.activeMonths\n      );\n      const currentTimeActive =\n        currentMonthActive || currentMonthExpiring\n          ? isCurrentTimeActive(sortedTableData[index]?.activeHours)\n          : false;\n\n      return classNames('cell', {\n        cell_month_active: currentMonthActive,\n        'cell_month_active--time_active':\n          currentMonthActive && currentTimeActive,\n        cell_month_expiring: currentMonthExpiring,\n        'cell_month_expiring--time_active':\n          currentMonthExpiring && currentTimeActive,\n        cell_month_inactive: !currentMonthActive,\n      });\n    },\n    [\n      isCurrentTimeActive,\n      isCurrentMonthActive,\n      isCurrentMonthExpiring,\n      sortedTableData,\n    ]\n  );\n\n  const caughtRenderer = useCallback(\n    ({ number, type }) => <CaughtCell number={number} type={type} />,\n    []\n  );\n  const pictureRenderer = useCallback(\n    ({ number, type }) => <PictureCell number={number} type={type} />,\n    []\n  );\n\n  const timeRenderer = useCallback(\n    ({ activeHours, activeHoursText }) => (\n      <TimeCell\n        activeHours={activeHours}\n        activeHoursText={activeHoursText}\n        currentHour={currentHour}\n        currentMinute={currentMinute}\n      />\n    ),\n    [currentHour, currentMinute]\n  );\n\n  const monthRenderer = useCallback(\n    ({ activeMonths }) => (\n      <MonthCell\n        activeMonths={activeMonths}\n        previewMonthIndex={state.previewMonthIndex}\n      />\n    ),\n    [state.previewMonthIndex]\n  );\n\n  const priceRenderer = useCallback(({ value }) => value.toLocaleString(), []);\n\n  const columns = useMemo(\n    () => [\n      { label: '🎣', width: 30, renderer: caughtRenderer },\n      { label: '#', width: 30, renderer: 'number' },\n      { label: 'Picture', renderer: pictureRenderer },\n      { label: 'Name', sortKey: 'name', width: 110, renderer: 'name' },\n      { label: 'Where', sortKey: 'location', width: 110, renderer: 'location' },\n      {\n        label: 'Size',\n        sortKey: 'shadow_size',\n        width: 50,\n        renderer: 'shadow_size',\n      },\n      { label: 'Time', renderer: timeRenderer },\n      { label: 'Month', width: 180, renderer: monthRenderer },\n      { label: 'Price', sortKey: 'value', width: 60, renderer: priceRenderer },\n    ],\n    [\n      caughtRenderer,\n      monthRenderer,\n      pictureRenderer,\n      priceRenderer,\n      timeRenderer,\n    ]\n  );\n\n  const cellRenderer = useCallback(\n    ({ columnIndex, key, rowIndex, style }) => {\n      const { label, renderer, sortKey } = columns[columnIndex];\n      const rowData = sortedTableData[rowIndex - 1];\n      let contents = `${columnIndex}, ${rowIndex}`;\n      const className = classNames(getRowClassName({ index: rowIndex - 1 }), {\n        cell_first: columnIndex === 0,\n        cell_padded: columnIndex === 3 || columnIndex === 4,\n      });\n      if (rowIndex === 0) {\n        return (\n          <HeaderCell\n            key={key}\n            sortKey={sortKey}\n            label={label}\n            className={className}\n            style={style}\n          />\n        );\n      } else if (typeof renderer === 'string') {\n        contents = rowData[renderer];\n      } else if (typeof renderer === 'function') {\n        contents = renderer(rowData);\n      }\n      return (\n        <div key={key} style={style} className={className}>\n          {contents}\n        </div>\n      );\n    },\n    [columns, getRowClassName, sortedTableData]\n  );\n\n  const getColumnWidth = useCallback(\n    ({ index }) => {\n      return columns[index].width || 120;\n    },\n    [columns]\n  );\n\n  const getRowHeight = useCallback(({ columnIndex, key, index, style }) => {\n    // Header\n    if (index === 0) return 30;\n    return 95;\n  }, []);\n\n  return (\n    <React.Fragment>\n      <StatusBar\n        count={sortedTableData.length}\n        hemisphere={\n          state.hemisphereFilter === HEMISPHERE_FILTER_NORTHERN\n            ? 'Northern'\n            : 'Southern'\n        }\n      />\n      <div className=\"table_container\">\n        <AutoSizer>\n          {({ width, height }) => {\n            return (\n              <MultiGrid\n                enableFixedRowScroll\n                fixedRowCount={1}\n                cellRenderer={cellRenderer}\n                columnWidth={getColumnWidth}\n                columnCount={columns.length}\n                height={height}\n                rowHeight={getRowHeight}\n                rowCount={sortedTableData.length + 1}\n                width={width}\n                hideTopRightGridScrollbar\n                hideBottomLeftGridScrollbar\n                // Prevents flickering on horizontal scan on mobile\n                overscanColumnCount={5}\n                // Rerender, for some reason, only happens if row count changes. This is needed\n                // to force a rerender when switching from fish to bugs with the same count\n                // https://github.com/bvaughn/react-virtualized/issues/1262#issuecomment-561966273\n                onRowsRendered={() => {}}\n              />\n            );\n          }}\n        </AutoSizer>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default React.memo(CritterTable);\n","import React, { useReducer } from 'react';\nimport Controls from 'Components/controls';\nimport CritterTable from 'Components/critter-table';\nimport './App.css';\n\nimport {\n  reducer,\n  initialState,\n  DispatchContext,\n  StateContext,\n} from './Reducer';\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <DispatchContext.Provider value={dispatch}>\n      <StateContext.Provider value={state}>\n        <div className=\"root_container\">\n          <div className=\"controls_container\">\n            <Controls />\n          </div>\n          <CritterTable />\n        </div>\n      </StateContext.Provider>\n    </DispatchContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}