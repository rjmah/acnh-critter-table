{"version":3,"sources":["Utility/constants.js","Reducer/index.js","Reducer/actionTypes.js","Components/control-elements/hemisphere-control.jsx","Components/control-elements/hour-format-control.jsx","Components/control-elements/export-state.jsx","Components/control-elements/import-state.jsx","Components/more-controls-modal.jsx","Components/control-elements/more-controls-trigger.jsx","Components/control-elements/search-input.jsx","Components/control-elements/active-month-control.jsx","Components/control-elements/hide-caught-control.jsx","Components/control-elements/availibility-control.jsx","Components/control-elements/critter-type-control.jsx","Components/controls.jsx","Data/formatted-data.js","Components/cells/caught-cell.jsx","Components/cells/storage-cell.jsx","Components/cells/header-cell.jsx","Components/cells/picture-cell.jsx","Components/cells/month-cell.jsx","Components/cells/time-cell.jsx","useInterval.js","Components/status-bar.jsx","Components/critter-table.jsx","App.jsx","serviceWorker.js","index.js"],"names":["n","MONTHS","FULL_DAY_ARRAY","Array","keys","d","Date","BOOT_CURRENT_MONTH_INDEX","getMonth","BOOT_CURRENT_HOUR_INDEX","getHours","BOOT_CURRENT_MINUTE_INDEX","getMinutes","StateContext","React","createContext","DispatchContext","lzSavedState","localStorage","getItem","savedStateString","LZString","decompressFromBase64","savedState","JSON","parse","initialFilterState","hideCaught","monthFilter","typeFilter","searchValue","sortColumn","sortDirection","initialState","caughtCritter","storageCritter","timeFormat","hemisphereFilter","storageValue","previewMonthIndex","reducer","previousState","state","type","payload","previousSortColumn","previousSortDirection","appState","newStorageValue","compressToBase64","stringify","setItem","memo","dispatch","useContext","handleChange","useCallback","e","target","value","style","display","flexDirection","p","htmlFor","hyphens","id","name","onChange","sx","borderRadius","key","ExportState","inputRef","useRef","padding","onSelect","inputElem","current","setSelectionRange","length","ref","readOnly","ImportState","useState","importInputText","setImportInputText","handleClick","alert","paddingRight","flex","placeholder","marginLeft","bg","fontWeight","onClick","MoreControlsModal","closeModal","getLegendCell","emoji","text","alignItems","flexGrow","activeHourText","useMemo","notActiveHourText","activeMonthText","expiringMonthText","notActiveMonthText","Fragment","className","marginTop","marginBottom","color","fontSize","width","cursor","position","role","aria-label","textAlign","MoreControlsTrigger","isModalOpen","setIsModalOpen","openModal","variant","marginRight","lineHeight","isClearButtonShown","m","optionValue","parseInt","undefined","map","month","i","isChecked","justifyContent","checked","classNames","select_is_active","select_is_expiring","flexWrap","paddingBottom","getNLengthArray","fishData","require","bugData","seaData","fossilData","FULL_YEAR_SET","Set","FULL_DAY_SET","formatTime12","hourIndex","number","suffix","formatTime24","toString","padStart","calculateActiveMonths","monthTuples","isSouth","activeMonths","forEach","start","end","add","formattedData","rowData","concat","timeTuples","time","rest","activeMonthsNorth","activeMonthsSouth","activeHours","activeHoursText12","activeHoursText24","push","caughtKey","isCaught","storageKey","isStorage","label","sortKey","headerStyle","sortIcon","src","process","alt","has","activeHoursText","currentHour","currentMinute","hour","left","Math","floor","useInterval","callback","delay","savedCallback","useEffect","setInterval","clearInterval","StatusBar","count","hemisphere","handleClickReset","paddingLeft","headerGridStyle","overflowX","overflowY","bodyGridStyle","currentMonth","setCurrentMonth","setCurrentHour","setCurrentMinute","updateCurrentTime","window","addEventListener","removeEventListener","isCurrentMonthActive","isCurrentMonthExpiring","monthIndex","nextMonthIndex","getNextMonthIndex","isCurrentTimeActive","localeAwareData","tableData","filter","location","displayed","toLowerCase","includes","sortFn","a","b","isAsc","aVal","bVal","sortedTableData","sort","getRowClassName","index","columnIndex","baseClassNames","currentMonthActive","currentMonthExpiring","currentTimeActive","cell_month_active","cell_month_expiring","cell_month_inactive","cell_first","cell_last","cell_padded","caughtRenderer","storageRenderer","pictureRenderer","timeRenderer","monthRenderer","priceRenderer","toLocaleString","columns","renderer","headerRenderer","rowIndex","cellRenderer","contents","cell_checkbox","getColumnWidth","getRowHeight","headerGridRef","bodyGridRef","handleScroll","scrollTop","scrollLeft","handleScrollEvent","height","borderAdjustedWidth","clientHeight","clientWidth","onScroll","scrollHeight","scrollWidth","columnWidth","columnCount","rowHeight","rowCount","autoHide","overscanColumnCount","overscanRowCount","App","useReducer","Provider","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.504cf14b.chunk.js","sourcesContent":["export const MONTHS = [\n  'Jan',\n  'Feb',\n  'Mar',\n  'Apr',\n  'May',\n  'June',\n  'July',\n  'Aug',\n  'Sept',\n  'Oct',\n  'Nov',\n  'Dec',\n];\n\nconst getNLengthArray = (n) => [...Array(n).keys()];\nexport const FULL_DAY_ARRAY = getNLengthArray(24);\n\nvar d = new Date();\nexport const BOOT_CURRENT_MONTH_INDEX = d.getMonth();\nexport const BOOT_CURRENT_HOUR_INDEX = d.getHours();\nexport const BOOT_CURRENT_MINUTE_INDEX = d.getMinutes();\nexport const MONTH_FILTER_ACTIVE = 'MONTH_FILTER_ACTIVE';\nexport const MONTH_FILTER_EXPIRING = 'MONTH_FILTER_EXPIRING';\nexport const TYPE_FILTER_FISH = 'TYPE_FILTER_FISH';\nexport const TYPE_FILTER_BUGS = 'TYPE_FILTER_BUGS';\nexport const TYPE_FILTER_SEA = 'TYPE_FILTER_SEA';\nexport const TYPE_FILTER_FOSSILS = 'TYPE_FILTER_FOSSILS';\n\nexport const HEMISPHERE_FILTER_NORTHERN = 'HEMISPHERE_FILTER_NORTHERN';\nexport const HEMISPHERE_FILTER_SOUTHERN = 'HEMISPHERE_FILTER_SOUTHERN';\n\nexport const TIME_FORMAT_12 = 'TIME_FORMAT_12';\nexport const TIME_FORMAT_24 = 'TIME_FORMAT_24';\n","import React from 'react';\nimport LZString from 'lz-string';\n\nimport {\n  CHANGE_PREVIEW_MONTH,\n  TOGGLE_CRITTER_CAUGHT,\n  TOGGLE_CRITTER_IN_STORAGE,\n  TOGGLE_HIDE_CAUGHT,\n  CHANGE_MONTH_FILTER,\n  CHANGE_TYPE_FILTER,\n  CHANGE_HEMISPHERE,\n  SEARCH,\n  CHANGE_TIME_FORMAT,\n  IMPORT_STATE,\n  FILTER_RESET,\n  SORT_COLUMN,\n} from './actionTypes';\nimport {\n  BOOT_CURRENT_MONTH_INDEX,\n  HEMISPHERE_FILTER_NORTHERN,\n  TIME_FORMAT_12,\n} from 'Utility/constants';\n\nexport const StateContext = React.createContext();\nexport const DispatchContext = React.createContext();\n\nconst lzSavedState = localStorage.getItem('acnh_store_lz');\n\nconst savedStateString = lzSavedState\n  ? LZString.decompressFromBase64(lzSavedState)\n  : localStorage.getItem('acnh_store');\nconst savedState = JSON.parse(savedStateString) || {};\n\nconst initialFilterState = {\n  hideCaught: false,\n  monthFilter: '',\n  typeFilter: '',\n  searchValue: '',\n  sortColumn: '',\n  sortDirection: 0,\n};\nexport const initialState = {\n  // previewMonthIndex: BOOT_CURRENT_MONTH_INDEX,\n  caughtCritter: {},\n  storageCritter: {},\n  ...initialFilterState,\n  timeFormat: TIME_FORMAT_12,\n  hemisphereFilter: HEMISPHERE_FILTER_NORTHERN,\n  storageValue: localStorage.getItem('acnh_store_lz'),\n  ...savedState,\n  // TODO: Don't reset the preview month from persisted store, since it's pretty confusing when you land on the wrong month after coming back\n  // Maybe can be solved be adding styles to denote you're previewing a month in the future\n  previewMonthIndex: BOOT_CURRENT_MONTH_INDEX,\n};\n\nexport function reducer(previousState, { type, payload }) {\n  let state;\n  switch (type) {\n    case FILTER_RESET: {\n      state = {\n        ...previousState,\n        previewMonthIndex: BOOT_CURRENT_MONTH_INDEX,\n        ...initialFilterState,\n      };\n      break;\n    }\n    case IMPORT_STATE:\n      state = JSON.parse(LZString.decompressFromBase64(payload));\n      break;\n    case CHANGE_PREVIEW_MONTH: {\n      state = { ...previousState, previewMonthIndex: payload };\n      break;\n    }\n    case TOGGLE_CRITTER_CAUGHT: {\n      //TODO maybe use thunks. So logic isn't in the reducer\n      const caughtCritter = { ...previousState.caughtCritter };\n      if (previousState.caughtCritter[payload]) {\n        delete caughtCritter[payload];\n      } else {\n        caughtCritter[payload] = true;\n      }\n      //TODO maybe throttle this with thunks\n      state = { ...previousState, caughtCritter };\n      break;\n    }\n    case TOGGLE_CRITTER_IN_STORAGE: {\n      //TODO maybe use thunks. So logic isn't in the reducer\n      const storageCritter = { ...previousState.storageCritter };\n      if (previousState.storageCritter[payload]) {\n        delete storageCritter[payload];\n      } else {\n        storageCritter[payload] = true;\n      }\n      //TODO maybe throttle this with thunks\n      state = { ...previousState, storageCritter };\n      break;\n    }\n    case TOGGLE_HIDE_CAUGHT: {\n      state = { ...previousState, hideCaught: !previousState.hideCaught };\n      break;\n    }\n    case CHANGE_MONTH_FILTER: {\n      state = { ...previousState, monthFilter: payload };\n      break;\n    }\n    case CHANGE_TYPE_FILTER: {\n      state = { ...previousState, typeFilter: payload };\n      break;\n    }\n    case CHANGE_HEMISPHERE: {\n      state = { ...previousState, hemisphereFilter: payload };\n      break;\n    }\n    case SEARCH: {\n      state = { ...previousState, searchValue: payload };\n      break;\n    }\n    case CHANGE_TIME_FORMAT: {\n      state = { ...previousState, timeFormat: payload };\n      break;\n    }\n    case SORT_COLUMN: {\n      const {\n        sortColumn: previousSortColumn,\n        sortDirection: previousSortDirection,\n      } = previousState;\n\n      /**\n       * 0 === unfiltered\n       * 1 === asc\n       * 2 === desc\n       */\n      const sortDirection =\n        previousSortColumn === payload ? (previousSortDirection + 1) % 3 : 1;\n\n      state = { ...previousState, sortColumn: payload, sortDirection };\n      break;\n    }\n    default:\n      state = previousState;\n  }\n\n  if (state !== previousState) {\n    const { storageValue, ...appState } = state;\n    const newStorageValue = LZString.compressToBase64(JSON.stringify(appState));\n    // Save storage value on state to share with export component\n    state.storageValue = newStorageValue;\n    localStorage.setItem('acnh_store_lz', newStorageValue);\n  }\n  return state;\n}\n","export const CHANGE_PREVIEW_MONTH = 'CHANGE_PREVIEW_MONTH';\nexport const TOGGLE_CRITTER_CAUGHT = 'TOGGLE_CRITTER_CAUGHT';\nexport const TOGGLE_CRITTER_IN_STORAGE = 'TOGGLE_CRITTER_IN_STORAGE';\nexport const TOGGLE_HIDE_CAUGHT = 'TOGGLE_HIDE_CAUGHT';\nexport const CHANGE_MONTH_FILTER = 'CHANGE_MONTH_FILTER';\nexport const CHANGE_TYPE_FILTER = 'CHANGE_TYPE_FILTER';\nexport const CHANGE_HEMISPHERE = 'CHANGE_HEMISPHERE';\nexport const SEARCH = 'SEARCH';\nexport const CHANGE_TIME_FORMAT = 'CHANGE_TIME_FORMAT';\nexport const IMPORT_STATE = 'IMPORT_STATE';\nexport const FILTER_RESET = 'FILTER_RESET';\nexport const SORT_COLUMN = 'SORT_COLUMN';\n","import React, { useContext, useCallback } from 'react';\nimport { DispatchContext, StateContext } from 'Reducer';\nimport { CHANGE_HEMISPHERE } from 'Reducer/actionTypes';\nimport { Label, Select } from '@rebass/forms';\nimport {\n  HEMISPHERE_FILTER_NORTHERN,\n  HEMISPHERE_FILTER_SOUTHERN,\n} from 'Utility/constants';\n\nfunction HemisphereControl() {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const handleChange = useCallback(\n    (e) => {\n      dispatch({ type: CHANGE_HEMISPHERE, payload: e.target.value });\n    },\n    [dispatch]\n  );\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <Label p={1} htmlFor=\"hemisphere_filter\" style={{ hyphens: 'auto' }}>\n        Hemisphere\n      </Label>\n      <Select\n        id=\"hemisphere_filter\"\n        name=\"Hemisphere Filter\"\n        value={state.hemisphereFilter}\n        onChange={handleChange}\n        sx={{\n          borderRadius: 5,\n        }}\n      >\n        <option key=\"active\" value={HEMISPHERE_FILTER_NORTHERN}>\n          Northern\n        </option>\n        <option key=\"expiring\" value={HEMISPHERE_FILTER_SOUTHERN}>\n          Southern\n        </option>\n      </Select>\n    </div>\n  );\n}\n\nexport default React.memo(HemisphereControl);\n","import React, { useContext, useCallback } from 'react';\nimport { DispatchContext, StateContext } from 'Reducer';\nimport { CHANGE_TIME_FORMAT } from 'Reducer/actionTypes';\nimport { Label, Select } from '@rebass/forms';\nimport { TIME_FORMAT_12, TIME_FORMAT_24 } from 'Utility/constants';\n\nfunction HourFormatControl() {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const handleChange = useCallback(\n    (e) => {\n      dispatch({ type: CHANGE_TIME_FORMAT, payload: e.target.value });\n    },\n    [dispatch]\n  );\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <Label p={1} htmlFor=\"time_format_select\">\n        Time Format\n      </Label>\n      <Select\n        id=\"time_format_select\"\n        name=\"Time Format\"\n        value={state.timeFormat}\n        onChange={handleChange}\n        sx={{\n          borderRadius: 5,\n        }}\n      >\n        <option key=\"12 hour\" value={TIME_FORMAT_12}>\n          AM / PM\n        </option>\n        <option key=\"24 hour\" value={TIME_FORMAT_24}>\n          24 hour\n        </option>\n      </Select>\n    </div>\n  );\n}\n\nexport default React.memo(HourFormatControl);\n","import React, { useRef, useContext } from 'react';\n\nimport { Input, Label } from '@rebass/forms';\nimport { StateContext } from 'Reducer';\n\nfunction ExportState() {\n  const inputRef = useRef();\n  const state = useContext(StateContext);\n\n  return (\n    <div>\n      <Label padding={1} htmlFor=\"export_state_input\">\n        Export State (Copy for other device)\n      </Label>\n      <Input\n        id=\"export_state_input\"\n        style={{ borderRadius: 5 }}\n        onSelect={() => {\n          const inputElem = inputRef?.current;\n          if (inputElem) {\n            inputElem.setSelectionRange(0, inputElem.value.length);\n          }\n        }}\n        ref={inputRef}\n        value={state.storageValue}\n        readOnly\n      />\n    </div>\n  );\n}\n\nexport default ExportState;\n","import React, { useState, useCallback, useContext } from 'react';\nimport LZString from 'lz-string';\n\nimport { Label, Input } from '@rebass/forms';\nimport { Flex, Box, Button } from 'rebass';\nimport { DispatchContext } from 'Reducer';\nimport { IMPORT_STATE } from 'Reducer/actionTypes';\n\nfunction ImportState() {\n  const dispatch = useContext(DispatchContext);\n  const [importInputText, setImportInputText] = useState('');\n\n  const handleChange = useCallback((e) => {\n    setImportInputText(e.target.value);\n  }, []);\n\n  const handleClick = useCallback(() => {\n    // Validate that string decompresses to JSON\n    try {\n      JSON.parse(LZString.decompressFromBase64(importInputText));\n    } catch (e) {\n      alert('Invalid string provided. String decompresses to invalid JSON.');\n    }\n\n    dispatch({ type: IMPORT_STATE, payload: importInputText });\n  }, [dispatch, importInputText]);\n\n  return (\n    <div>\n      <Label padding={1} htmlFor=\"import_state_input\">\n        Import State (Paste from other device)\n      </Label>\n      <Flex>\n        <Box paddingRight={1} flex=\"1 1 auto\">\n          <Input\n            id=\"import_state_input\"\n            placeholder=\"From other device...\"\n            style={{ borderRadius: 5 }}\n            onChange={handleChange}\n            value={importInputText}\n          />\n        </Box>\n        <Box marginLeft={1}>\n          <Button\n            bg=\"rgb(51, 152, 247)\"\n            style={{ fontWeight: 600 }}\n            onClick={handleClick}\n          >\n            Import\n          </Button>\n        </Box>\n      </Flex>\n    </div>\n  );\n}\n\nexport default ImportState;\n","import React, { useMemo, useCallback } from 'react';\nimport { Button, Flex, Box } from 'rebass';\n\nimport ToggleHemisphere from './control-elements/hemisphere-control';\nimport ToggleTimeFormat from './control-elements/hour-format-control';\nimport ExportState from './control-elements/export-state';\nimport ImportState from './control-elements/import-state';\n\nfunction MoreControlsModal({ closeModal }) {\n  const getLegendCell = useCallback(\n    (emoji, text) => (\n      <Box>\n        <Flex alignItems=\"center\">\n          <Box>{emoji}</Box>\n          <Box flexGrow={1}>{text}</Box>\n        </Flex>\n      </Box>\n    ),\n    []\n  );\n  const activeHourText = useMemo(\n    () => getLegendCell('✅⏱', 'Available at this hour'),\n    [getLegendCell]\n  );\n  const notActiveHourText = useMemo(\n    () => getLegendCell('❌⏱', 'Not available at this hour'),\n    [getLegendCell]\n  );\n\n  const activeMonthText = useMemo(\n    () => getLegendCell('✅📅', 'Available in active month'),\n    [getLegendCell]\n  );\n  const expiringMonthText = useMemo(\n    () => getLegendCell('⌛️📅', 'Expiring at end of active month'),\n    [getLegendCell]\n  );\n  const notActiveMonthText = useMemo(\n    () => getLegendCell('❌📅', 'Not available in active month'),\n    [getLegendCell]\n  );\n  return (\n    <React.Fragment>\n      <div className=\"more_controls_modal_overlay\" onClick={closeModal} />\n      <div className=\"more_controls_modal\">\n        <Flex\n          padding={3}\n          flexDirection=\"column\"\n          marginTop={20}\n          marginBottom={40}\n        >\n          <Box>\n            <Button\n              padding={0}\n              onClick={closeModal}\n              color=\"black\"\n              bg=\"lightgray\"\n              fontSize={25}\n              width={30}\n              marginTop={-30}\n              style={{ cursor: 'pointer', position: 'fixed' }}\n            >\n              <span role=\"img\" aria-label=\"close\">\n                ✖️\n              </span>\n            </Button>\n          </Box>\n          <Box>\n            <ToggleHemisphere />\n          </Box>\n          <Box>\n            <ToggleTimeFormat />\n          </Box>\n          <Box marginTop={20}>\n            <Flex flexDirection=\"column\" textAlign=\"center\">\n              <Box p={2} fontSize={20}>\n                Row Color Legend\n              </Box>\n              <Box p={2} bg=\"#9ce482\">\n                <Flex flexDirection=\"column\">\n                  {activeHourText}\n                  {activeMonthText}\n                </Flex>\n              </Box>\n              <Box p={2} bg=\"#d9ead3\">\n                <Flex flexDirection=\"column\">\n                  {notActiveHourText}\n                  {activeMonthText}\n                </Flex>\n              </Box>\n              <Box p={2} bg=\"#f8e19d\">\n                <Flex flexDirection=\"column\">\n                  {activeHourText}\n                  {expiringMonthText}\n                </Flex>\n              </Box>\n              <Box p={2} bg=\"#fff2cc\">\n                <Flex flexDirection=\"column\">\n                  {notActiveHourText}\n                  {expiringMonthText}\n                </Flex>\n              </Box>\n              <Box p={2} bg=\"#f4cccc\">\n                {notActiveMonthText}\n              </Box>\n            </Flex>\n          </Box>\n          <Box marginTop={20}>\n            <ExportState />\n          </Box>\n          <Box>\n            <ImportState />\n          </Box>\n        </Flex>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default MoreControlsModal;\n","import React, { useCallback, useState } from 'react';\n\nimport { Button } from 'rebass';\nimport MoreControlsModal from '../more-controls-modal';\n\nfunction MoreControlsTrigger() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const openModal = useCallback(() => {\n    setIsModalOpen(true);\n  }, []);\n\n  const closeModal = useCallback(() => {\n    setIsModalOpen(false);\n  }, []);\n\n  return (\n    <React.Fragment>\n      <Button\n        padding={1}\n        variant=\"outline\"\n        bg=\"white\"\n        color=\"black\"\n        width={30}\n        fontSize={25}\n        marginRight={1}\n        lineHeight={1}\n        onClick={openModal}\n        style={{ cursor: 'pointer' }}\n      >\n        ☰\n      </Button>\n      {isModalOpen && <MoreControlsModal closeModal={closeModal} />}\n    </React.Fragment>\n  );\n}\n\nexport default MoreControlsTrigger;\n","import React, { useContext, useCallback, useMemo } from 'react';\nimport { DispatchContext, StateContext } from 'Reducer';\nimport { SEARCH } from 'Reducer/actionTypes';\nimport { Button } from 'rebass';\nimport { Input } from '@rebass/forms';\n\nfunction SearchInput() {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const handleChange = useCallback(\n    (e) => {\n      dispatch({ type: SEARCH, payload: e.target.value });\n    },\n    [dispatch]\n  );\n\n  const handleClick = useCallback(\n    (e) => {\n      dispatch({ type: SEARCH, payload: '' });\n    },\n    [dispatch]\n  );\n  const isClearButtonShown = useMemo(() => !!state.searchValue, [\n    state.searchValue,\n  ]);\n\n  return (\n    <div className=\"search\">\n      <Input\n        m={1 / 2}\n        id=\"search\"\n        name=\"search\"\n        style={{ borderRadius: 5, marginRight: 1 }}\n        value={state.searchValue}\n        onChange={handleChange}\n        placeholder=\"Search name or location\"\n      />\n      {isClearButtonShown && (\n        <Button className=\"search__clear_button\" p={0} onClick={handleClick}>\n          <span role=\"img\" aria-label=\"clear search\">\n            ✖️\n          </span>\n        </Button>\n      )}\n    </div>\n  );\n}\n\nexport default React.memo(SearchInput);\n","import React, { useMemo, useContext, useCallback } from 'react';\nimport { DispatchContext, StateContext } from 'Reducer';\nimport { CHANGE_PREVIEW_MONTH } from 'Reducer/actionTypes';\nimport { Label, Select } from '@rebass/forms';\nimport { BOOT_CURRENT_MONTH_INDEX, MONTHS } from 'Utility/constants';\n\nfunction ActiveMonthControl() {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const handleChange = useCallback(\n    (e) => {\n      const optionValue = e.target.value;\n      const payload = optionValue === '' ? null : parseInt(optionValue, 10);\n      dispatch({ type: CHANGE_PREVIEW_MONTH, payload });\n    },\n    [dispatch]\n  );\n\n  const value = useMemo(() => state.previewMonthIndex, [\n    state.previewMonthIndex,\n  ]);\n\n  return (\n    <div>\n      <Label p={1} htmlFor=\"active_month\">\n        Month\n      </Label>\n      <Select\n        fontWeight={\n          state.previewMonthIndex === BOOT_CURRENT_MONTH_INDEX ? 800 : undefined\n        }\n        id=\"active_month\"\n        name=\"Active Month\"\n        value={value}\n        onChange={handleChange}\n        sx={{\n          borderRadius: 5,\n        }}\n      >\n        {MONTHS.map((month, i) => (\n          <option key={i} value={i}>\n            {month}\n          </option>\n        ))}\n        ))}\n      </Select>\n    </div>\n  );\n}\n\nexport default React.memo(ActiveMonthControl);\n","import React, { useMemo, useContext, useCallback } from 'react';\nimport { DispatchContext, StateContext } from 'Reducer';\nimport { Label, Switch } from '@rebass/forms';\nimport { TOGGLE_HIDE_CAUGHT } from 'Reducer/actionTypes';\nimport { Flex } from 'rebass';\n\nfunction HideCaughtControl() {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const handleClick = useCallback(() => {\n    dispatch({ type: TOGGLE_HIDE_CAUGHT });\n  }, [dispatch]);\n\n  const isChecked = useMemo(() => state.hideCaught, [state.hideCaught]);\n  return (\n    <Flex className=\"toggle_caught_container\">\n      <Label padding={1} htmlFor=\"hide_caught\">\n        Hide{' '}\n        <span role=\"img\" aria-label=\"checked\">\n          🎣\n        </span>\n      </Label>\n      <Flex justifyContent=\"center\" flexDirection=\"column\" flexGrow={1}>\n        <Switch id=\"hide_caught\" checked={isChecked} onClick={handleClick} />\n      </Flex>\n    </Flex>\n  );\n}\n\nexport default React.memo(HideCaughtControl);\n","import React, { useContext, useCallback } from 'react';\nimport classNames from 'classnames';\nimport { DispatchContext, StateContext } from 'Reducer';\nimport { CHANGE_MONTH_FILTER } from 'Reducer/actionTypes';\nimport { Label, Select } from '@rebass/forms';\nimport { MONTH_FILTER_ACTIVE, MONTH_FILTER_EXPIRING } from 'Utility/constants';\n\nfunction AvailibilityControl() {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const handleChange = useCallback(\n    (e) => {\n      dispatch({ type: CHANGE_MONTH_FILTER, payload: e.target.value });\n    },\n    [dispatch]\n  );\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <Label p={1} htmlFor=\"month_filter\">\n        Availability\n      </Label>\n      <Select\n        className={classNames({\n          select_is_active: state.monthFilter === MONTH_FILTER_ACTIVE,\n          select_is_expiring: state.monthFilter === MONTH_FILTER_EXPIRING,\n        })}\n        id=\"month_filter\"\n        name=\"Month Filter\"\n        value={state.monthFilter}\n        onChange={handleChange}\n        sx={{\n          borderRadius: 5,\n        }}\n      >\n        <option key=\"all\" value=\"\">\n          All\n        </option>\n        <option key=\"active\" value={MONTH_FILTER_ACTIVE}>\n          Active\n        </option>\n        <option key=\"expiring\" value={MONTH_FILTER_EXPIRING}>\n          Expiring\n        </option>\n      </Select>\n    </div>\n  );\n}\n\nexport default React.memo(AvailibilityControl);\n","import React, { useContext, useCallback } from 'react';\nimport { DispatchContext, StateContext } from 'Reducer';\nimport { CHANGE_TYPE_FILTER } from 'Reducer/actionTypes';\nimport { Label, Select } from '@rebass/forms';\nimport {\n  TYPE_FILTER_FISH,\n  TYPE_FILTER_BUGS,\n  TYPE_FILTER_SEA,\n  TYPE_FILTER_FOSSILS,\n} from 'Utility/constants';\n\nfunction CritterTypeControl() {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const handleChange = useCallback(\n    (e) => {\n      dispatch({ type: CHANGE_TYPE_FILTER, payload: e.target.value });\n    },\n    [dispatch]\n  );\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <Label p={1} htmlFor=\"type_filter\">\n        Type\n      </Label>\n      <Select\n        id=\"type_filter\"\n        name=\"Type Filter\"\n        value={state.typeFilter}\n        onChange={handleChange}\n        sx={{\n          borderRadius: 5,\n        }}\n      >\n        <option key=\"all\" value=\"\">\n          All\n        </option>\n        <option key=\"fish\" value={TYPE_FILTER_FISH}>\n          Fish\n        </option>\n        <option key=\"bugs\" value={TYPE_FILTER_BUGS}>\n          Bugs\n        </option>\n        <option key=\"sea\" value={TYPE_FILTER_SEA}>\n          Sea\n        </option>\n        <option key=\"fossils\" value={TYPE_FILTER_FOSSILS}>\n          Fossils\n        </option>\n      </Select>\n    </div>\n  );\n}\n\nexport default React.memo(CritterTypeControl);\n","import React from 'react';\nimport { Flex, Box } from 'rebass';\nimport MoreControlsTrigger from './control-elements/more-controls-trigger';\nimport SearchInput from './control-elements/search-input';\nimport ActiveMonthControl from './control-elements/active-month-control';\nimport HideCaughtControl from './control-elements/hide-caught-control';\nimport AvailibilityControl from './control-elements/availibility-control';\nimport CritterTypeControl from './control-elements/critter-type-control';\n\nfunction Controls() {\n  return (\n    <Flex flexWrap=\"wrap\" width=\"100%\">\n      <Box paddingBottom={0} width={[1]}>\n        <Flex>\n          <Box>\n            <MoreControlsTrigger />\n          </Box>\n          <Box flex=\"1 1 auto\">\n            <SearchInput />\n          </Box>\n        </Flex>\n      </Box>\n      <Box paddingRight={1} width={[1 / 4]}>\n        <ActiveMonthControl />\n      </Box>\n      <Box paddingRight={1} width={[1 / 4]}>\n        <HideCaughtControl />\n      </Box>\n      <Box paddingRight={2} width={[1 / 4]}>\n        <AvailibilityControl />\n      </Box>\n      <Box width={[1 / 4]}>\n        <CritterTypeControl />\n      </Box>\n    </Flex>\n  );\n}\n\nexport default React.memo(Controls);\n","const getNLengthArray = (n) => [...Array(n).keys()];\n\nconst fishData = require('./fish_data.json');\nconst bugData = require('./bug_data.json');\nconst seaData = require('./sea_data.json');\nconst fossilData = require('./fossil_data.json');\nconst FULL_YEAR_SET = new Set(getNLengthArray(12));\nconst FULL_DAY_ARRAY = getNLengthArray(24);\nconst FULL_DAY_SET = new Set(FULL_DAY_ARRAY);\n\nfunction formatTime12(hourIndex) {\n  let number = hourIndex % 12;\n  number = number || 12;\n\n  const suffix = hourIndex / 12 < 1 ? 'AM' : 'PM';\n  return `${number}${suffix}`;\n}\n\nfunction formatTime24(hourIndex) {\n  return `${hourIndex.toString().padStart(2, '0')}:00`;\n}\n\nfunction calculateActiveMonths(monthTuples, isSouth) {\n  let activeMonths = new Set();\n  monthTuples.forEach(([start, end]) => {\n    if (start === 0 && end === 11) {\n      activeMonths = FULL_YEAR_SET;\n      return;\n    }\n    if (isSouth) {\n      start = (start + 6) % 12;\n      end = (end + 6) % 12;\n    }\n\n    while (start !== end) {\n      activeMonths.add(start);\n      start = (start + 1) % 12;\n    }\n\n    activeMonths.add(end);\n  });\n\n  return activeMonths;\n}\n\nconst formattedData = fishData\n  .map((rowData) => ({ ...rowData, type: 'fish' }))\n  .concat(bugData.map((rowData) => ({ ...rowData, type: 'bug' })))\n  .concat(seaData.map((rowData) => ({ ...rowData, type: 'sea' })))\n  .map(({ month: monthTuples, time: timeTuples, ...rest }) => {\n    const activeMonthsNorth = calculateActiveMonths(monthTuples, false);\n    const activeMonthsSouth = calculateActiveMonths(monthTuples, true);\n\n    let activeHours = new Set();\n    let activeHoursText12 = [];\n    let activeHoursText24 = [];\n    timeTuples.forEach(([start, end]) => {\n      if (start === end) {\n        activeHours = FULL_DAY_SET;\n        activeHoursText12.push('All Day');\n        activeHoursText24.push('All Day');\n        return;\n      }\n      activeHoursText12.push(`${formatTime12(start)} - ${formatTime12(end)}`);\n      activeHoursText24.push(`${formatTime24(start)} - ${formatTime24(end)}`);\n\n      while (start !== end) {\n        activeHours.add(start);\n        start++;\n        if (start > 23) {\n          start = 0;\n        }\n      }\n      // don't include end for time\n    });\n\n    return {\n      activeMonthsNorth,\n      activeMonthsSouth,\n      activeHours,\n      activeHoursText12,\n      activeHoursText24,\n      ...rest,\n    };\n  })\n  .concat(fossilData.map((rowData) => ({ ...rowData, type: 'fossil' })));\n\nexport default formattedData;\n","import React, { useMemo, useContext, useCallback } from 'react';\nimport { DispatchContext, StateContext } from 'Reducer';\nimport { TOGGLE_CRITTER_CAUGHT } from 'Reducer/actionTypes';\nimport { Label, Checkbox } from '@rebass/forms';\n\nfunction CaughtCell({ number, type }) {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const caughtKey = useMemo(() => `${type}${number}`, [type, number]);\n\n  const handleChange = useCallback(\n    (e) => {\n      dispatch({ type: TOGGLE_CRITTER_CAUGHT, payload: caughtKey });\n    },\n    [dispatch, caughtKey]\n  );\n  const isCaught = useMemo(() => {\n    return state.caughtCritter[caughtKey];\n  }, [state.caughtCritter, caughtKey]);\n  return (\n    <div>\n      <Label>\n        <Checkbox\n          id={`${type}_caught_${number}`}\n          className=\"caught_checkbox\"\n          checked={isCaught || false}\n          onChange={handleChange}\n        />\n      </Label>\n    </div>\n  );\n}\n\nexport default React.memo(CaughtCell);\n","import React, { useMemo, useContext, useCallback } from 'react';\nimport { DispatchContext, StateContext } from 'Reducer';\nimport { TOGGLE_CRITTER_IN_STORAGE } from 'Reducer/actionTypes';\nimport { Label, Checkbox } from '@rebass/forms';\n\nfunction StorageCell({ number, type }) {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const storageKey = useMemo(() => `${type}${number}`, [type, number]);\n\n  const handleChange = useCallback(\n    (e) => {\n      dispatch({ type: TOGGLE_CRITTER_IN_STORAGE, payload: storageKey });\n    },\n    [dispatch, storageKey]\n  );\n  const isStorage = useMemo(() => {\n    return state.storageCritter[storageKey];\n  }, [state.storageCritter, storageKey]);\n  return (\n    <div>\n      <Label>\n        <Checkbox\n          id={`${type}_storage_${number}`}\n          className=\"storage_checkbox\"\n          checked={isStorage || false}\n          onChange={handleChange}\n        />\n      </Label>\n    </div>\n  );\n}\n\nexport default React.memo(StorageCell);\n","import React, { useCallback, useContext, useMemo } from 'react';\nimport classNames from 'classnames';\nimport { DispatchContext, StateContext } from 'Reducer';\nimport { SORT_COLUMN } from 'Reducer/actionTypes';\n\nfunction HeaderCell({ className, style, label, sortKey }) {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const handleClick = useCallback(() => {\n    dispatch({ type: SORT_COLUMN, payload: sortKey });\n  }, [dispatch, sortKey]);\n  let headerStyle = { ...style };\n  if (sortKey) {\n    headerStyle.cursor = 'pointer';\n  }\n\n  const sortIcon = useMemo(() => {\n    if (state.sortColumn !== sortKey) return '';\n    if (state.sortDirection === 1) return '↑';\n    if (state.sortDirection === 2) return '↓';\n  }, [sortKey, state.sortColumn, state.sortDirection]);\n  return (\n    <div\n      className={classNames(className, {\n        'header_cell--sortable': sortKey,\n      })}\n      style={headerStyle}\n      onClick={sortKey ? handleClick : undefined}\n    >\n      {label} {sortIcon}\n    </div>\n  );\n}\n\nexport default React.memo(HeaderCell);\n","import React from 'react';\n\nfunction PictureCell({ number, type }) {\n  return (\n    <div>\n      <img\n        src={`${process.env.PUBLIC_URL}/${type}${number\n          .toString()\n          .padStart(2, '0')}.png`}\n        alt=\"\"\n      />\n    </div>\n  );\n}\n\nexport default React.memo(PictureCell);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { MONTHS } from 'Utility/constants';\n\nfunction MonthCell({ activeMonths, previewMonthIndex }) {\n  return (\n    <div className=\"month_container\">\n      {MONTHS.map((month, i) => (\n        <div\n          key={i}\n          className={classNames('month_square', {\n            'month_square--active': activeMonths && activeMonths.has(i),\n            'month_square--current': i === previewMonthIndex,\n          })}\n        >\n          {month}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default React.memo(MonthCell);\n","import React, { useContext } from 'react';\nimport classNames from 'classnames';\n\nimport {\n  FULL_DAY_ARRAY,\n  TIME_FORMAT_12,\n  TIME_FORMAT_24,\n} from 'Utility/constants';\nimport { StateContext } from 'Reducer';\n\nfunction TimeCell({\n  activeHours,\n  activeHoursText,\n  currentHour,\n  currentMinute,\n}) {\n  const state = useContext(StateContext);\n\n  return (\n    <div>\n      <div\n        className={classNames('hour_labels', {\n          'hour_labels--12': state.timeFormat === TIME_FORMAT_12,\n          'hour_labels--24': state.timeFormat === TIME_FORMAT_24,\n        })}\n      >\n        {state.timeFormat === TIME_FORMAT_12 ? (\n          <React.Fragment>\n            <div className=\"hour_label\">\n              AM\n              <br />\n              12\n            </div>\n            <div className=\"hour_label\">6</div>\n            <div className=\"hour_label\">\n              PM\n              <br />\n              12\n            </div>\n            <div className=\"hour_label\">6</div>\n          </React.Fragment>\n        ) : (\n          <React.Fragment>\n            <div className=\"hour_label\">0</div>\n            <div className=\"hour_label\">6</div>\n            <div className=\"hour_label\">12</div>\n            <div className=\"hour_label\">18</div>\n          </React.Fragment>\n        )}\n      </div>\n      <div className=\"hour_container\">\n        {FULL_DAY_ARRAY.map((hour, i) => (\n          <div key={i} className=\"hour_square\">\n            {activeHours && activeHours.has(i) && (\n              <div\n                className={classNames('hour_square__active', {\n                  'hour_square__active--start':\n                    activeHours && !activeHours.has((i + 23) % 24),\n                  'hour_square__active--end':\n                    activeHours && !activeHours.has((i + 1) % 24),\n                })}\n              />\n            )}\n          </div>\n        ))}\n        <div\n          className=\"hour_container__current_time_marker\"\n          style={{\n            left: 4 * currentHour + Math.floor(currentMinute / 15),\n          }}\n        />\n        <div className=\"hour_container__end_marker\" />\n      </div>\n      <div className=\"hour_text\">\n        {activeHoursText.map((text, i) => (\n          <div key={i} className=\"hour_text__entry\">\n            {text}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(TimeCell);\n","import { useEffect, useRef } from 'react';\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;\n","import React, { useCallback, useContext } from 'react';\nimport { Flex, Box, Button } from 'rebass';\nimport { DispatchContext } from 'Reducer';\nimport { FILTER_RESET } from 'Reducer/actionTypes';\n\nfunction StatusBar({ count = 0, hemisphere = 'Northern' }) {\n  const dispatch = useContext(DispatchContext);\n\n  const handleClickReset = useCallback(() => {\n    dispatch({ type: FILTER_RESET });\n  }, [dispatch]);\n\n  return (\n    <Flex\n      fontSize={13}\n      justifyContent=\"space-between\"\n      className=\"status_bar\"\n      alignItems=\"center\"\n    >\n      <Box>\n        Count: <b>{count}</b>\n      </Box>\n      <Box>\n        Hemisphere: <b>{hemisphere}</b>\n      </Box>\n      <Box>\n        <Button\n          bg=\"rgb(51, 152, 247)\"\n          p={1}\n          paddingLeft={1}\n          paddingRight={1}\n          onClick={handleClickReset}\n          style={{ cursor: 'pointer', fontWeight: 600 }}\n        >\n          Reset Filters\n        </Button>\n      </Box>\n    </Flex>\n  );\n}\n\nexport default StatusBar;\n","import React, {\n  useState,\n  useContext,\n  useMemo,\n  useCallback,\n  useEffect,\n  useRef,\n} from 'react';\nimport { AutoSizer, Grid, ScrollSync } from 'react-virtualized';\nimport classNames from 'classnames';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport formattedData from 'Data/formatted-data';\n\nimport { StateContext, DispatchContext } from 'Reducer';\nimport {\n  BOOT_CURRENT_MONTH_INDEX,\n  BOOT_CURRENT_HOUR_INDEX,\n  BOOT_CURRENT_MINUTE_INDEX,\n  MONTH_FILTER_ACTIVE,\n  MONTH_FILTER_EXPIRING,\n  TYPE_FILTER_FISH,\n  TYPE_FILTER_BUGS,\n  TYPE_FILTER_SEA,\n  TYPE_FILTER_FOSSILS,\n  HEMISPHERE_FILTER_NORTHERN,\n  TIME_FORMAT_12,\n} from 'Utility/constants';\nimport CaughtCell from './cells/caught-cell';\nimport StorageCell from './cells/storage-cell';\nimport HeaderCell from './cells/header-cell';\nimport PictureCell from './cells/picture-cell';\nimport MonthCell from './cells/month-cell';\nimport TimeCell from './cells/time-cell';\nimport useInterval from 'useInterval';\nimport { CHANGE_PREVIEW_MONTH } from 'Reducer/actionTypes';\nimport StatusBar from './status-bar';\n\nfunction getNextMonthIndex(monthIndex) {\n  let nextMonthIndex = monthIndex + 1;\n  if (nextMonthIndex > 11) nextMonthIndex = 0;\n  return nextMonthIndex;\n}\n\nconst headerGridStyle = { overflowX: 'hidden', overflowY: 'hidden' };\nconst bodyGridStyle = { overflowX: false, overflowY: false };\n\nfunction CritterTable() {\n  const state = useContext(StateContext);\n  const dispatch = useContext(DispatchContext);\n  const [currentMonth, setCurrentMonth] = useState(BOOT_CURRENT_MONTH_INDEX);\n  const [currentHour, setCurrentHour] = useState(BOOT_CURRENT_HOUR_INDEX);\n  const [currentMinute, setCurrentMinute] = useState(BOOT_CURRENT_MINUTE_INDEX);\n\n  const updateCurrentTime = useCallback(() => {\n    var d = new Date();\n    setCurrentMonth(d.getMonth());\n    setCurrentHour(d.getHours());\n    setCurrentMinute(d.getMinutes());\n  }, []);\n\n  // Update active month if month changes when app is open\n  useEffect(() => {\n    if (\n      state.previewMonthIndex === BOOT_CURRENT_MONTH_INDEX &&\n      currentMonth !== BOOT_CURRENT_MONTH_INDEX\n    ) {\n      dispatch({ type: CHANGE_PREVIEW_MONTH, payload: currentMonth });\n    }\n  }, [currentMonth, dispatch, state.previewMonthIndex]);\n\n  // Every minute, check current time to update the time graph\n  useInterval(updateCurrentTime, 60000);\n\n  // Check current time when window gains focus, since interval doesn't run in the background\n  useEffect(() => {\n    window.addEventListener('focus', updateCurrentTime);\n    return () => window.removeEventListener('focus', updateCurrentTime);\n  }, [updateCurrentTime]);\n\n  const isCurrentMonthActive = useCallback(\n    (activeMonths) =>\n      !activeMonths ? true : activeMonths.has(state.previewMonthIndex),\n    [state.previewMonthIndex]\n  );\n\n  const isCurrentMonthExpiring = useCallback(\n    (activeMonths) =>\n      !activeMonths\n        ? true\n        : activeMonths.has(state.previewMonthIndex) &&\n          !activeMonths.has(getNextMonthIndex(state.previewMonthIndex)),\n    [state.previewMonthIndex]\n  );\n\n  const isCurrentTimeActive = useCallback(\n    (activeHours) => (!activeHours ? true : activeHours.has(currentHour)),\n    [currentHour]\n  );\n  const localeAwareData = useMemo(\n    () =>\n      formattedData.map(\n        ({\n          activeMonthsNorth,\n          activeMonthsSouth,\n          activeHoursText12,\n          activeHoursText24,\n          ...rest\n        }) => ({\n          ...rest,\n          activeMonths:\n            state.hemisphereFilter === HEMISPHERE_FILTER_NORTHERN\n              ? activeMonthsNorth\n              : activeMonthsSouth,\n          activeHoursText:\n            state.timeFormat === TIME_FORMAT_12\n              ? activeHoursText12\n              : activeHoursText24,\n        })\n      ),\n    [state.hemisphereFilter, state.timeFormat]\n  );\n\n  const tableData = useMemo(() => {\n    const filteredData = localeAwareData.filter(\n      ({ activeMonths, number, type, name, location }) => {\n        let displayed = true;\n        if (displayed && state.searchValue) {\n          displayed =\n            name?.toLowerCase().includes(state.searchValue.toLowerCase()) ||\n            location?.toLowerCase().includes(state.searchValue.toLowerCase());\n        }\n        if (displayed && state.typeFilter) {\n          if (state.typeFilter === TYPE_FILTER_FISH) {\n            displayed = type === 'fish';\n          } else if (state.typeFilter === TYPE_FILTER_BUGS) {\n            displayed = type === 'bug';\n          } else if (state.typeFilter === TYPE_FILTER_SEA) {\n            displayed = type === 'sea';\n          } else if (state.typeFilter === TYPE_FILTER_FOSSILS) {\n            displayed = type === 'fossil';\n          }\n        }\n\n        if (displayed && state.monthFilter) {\n          if (state.monthFilter === MONTH_FILTER_ACTIVE) {\n            displayed = isCurrentMonthActive(activeMonths);\n          } else if (state.monthFilter === MONTH_FILTER_EXPIRING) {\n            displayed = isCurrentMonthExpiring(activeMonths);\n          }\n        }\n        if (displayed && state.hideCaught) {\n          displayed = !state.caughtCritter[`${type}${number}`];\n        }\n        return displayed;\n      }\n    );\n    return filteredData;\n  }, [\n    localeAwareData,\n    state.searchValue,\n    state.typeFilter,\n    state.monthFilter,\n    state.hideCaught,\n    state.caughtCritter,\n    isCurrentMonthActive,\n    isCurrentMonthExpiring,\n  ]);\n\n  const sortFn = useCallback(\n    (a, b) => {\n      const isAsc = state.sortDirection === 1;\n      let aVal = a[state.sortColumn];\n      if (typeof aVal === 'string') aVal = aVal.toLowerCase();\n      let bVal = b[state.sortColumn];\n      if (typeof bVal === 'string') bVal = bVal.toLowerCase();\n\n      if (aVal === bVal) return 0;\n\n      if (!aVal) return 1;\n      if (!bVal) return -1;\n\n      if (aVal < bVal) {\n        return isAsc ? -1 : 1;\n      }\n\n      if (aVal > bVal) {\n        return isAsc ? 1 : -1;\n      }\n      return 0;\n    },\n    [state.sortColumn, state.sortDirection]\n  );\n\n  const sortedTableData = useMemo(() => {\n    return state.sortDirection === 0 ? tableData : [...tableData].sort(sortFn);\n  }, [sortFn, state.sortDirection, tableData]);\n\n  const getRowClassName = useCallback(\n    ({ index, columnIndex }) => {\n      let baseClassNames = '';\n      if (index < 0) {\n        //header;\n        baseClassNames = 'header_cell';\n      } else {\n        if (sortedTableData[index]?.type === 'fossil') {\n          baseClassNames = 'cell fossil_cell';\n        } else {\n          const currentMonthActive = isCurrentMonthActive(\n            sortedTableData[index]?.activeMonths\n          );\n\n          const currentMonthExpiring = isCurrentMonthExpiring(\n            sortedTableData[index]?.activeMonths\n          );\n          const currentTimeActive =\n            currentMonthActive || currentMonthExpiring\n              ? isCurrentTimeActive(sortedTableData[index]?.activeHours)\n              : false;\n\n          baseClassNames = classNames('cell', {\n            cell_month_active: currentMonthActive,\n            'cell_month_active--time_active':\n              currentMonthActive && currentTimeActive,\n            cell_month_expiring: currentMonthExpiring,\n            'cell_month_expiring--time_active':\n              currentMonthExpiring && currentTimeActive,\n            cell_month_inactive: !currentMonthActive,\n          });\n        }\n      }\n      return classNames(baseClassNames, {\n        cell_first: columnIndex === 0,\n        cell_last: columnIndex === 9,\n        cell_padded: columnIndex === 4 || columnIndex === 5,\n      });\n    },\n    [\n      isCurrentTimeActive,\n      isCurrentMonthActive,\n      isCurrentMonthExpiring,\n      sortedTableData,\n    ]\n  );\n\n  const caughtRenderer = useCallback(\n    ({ number, type }) => <CaughtCell number={number} type={type} />,\n    []\n  );\n  const storageRenderer = useCallback(\n    ({ number, type }) => <StorageCell number={number} type={type} />,\n    []\n  );\n  const pictureRenderer = useCallback(\n    ({ number, type }) => <PictureCell number={number} type={type} />,\n    []\n  );\n\n  const timeRenderer = useCallback(\n    ({ activeHours, activeHoursText }) =>\n      !activeHours ? null : (\n        <TimeCell\n          activeHours={activeHours}\n          activeHoursText={activeHoursText}\n          currentHour={currentHour}\n          currentMinute={currentMinute}\n        />\n      ),\n    [currentHour, currentMinute]\n  );\n\n  const monthRenderer = useCallback(\n    ({ activeMonths }) =>\n      !activeMonths ? null : (\n        <MonthCell\n          activeMonths={activeMonths}\n          previewMonthIndex={state.previewMonthIndex}\n        />\n      ),\n    [state.previewMonthIndex]\n  );\n\n  const priceRenderer = useCallback(({ value }) => value.toLocaleString(), []);\n\n  const columns = useMemo(\n    () => [\n      { label: '🎣', width: 30, renderer: caughtRenderer },\n      { label: '📦', width: 30, renderer: storageRenderer },\n      { label: '#', width: 30, renderer: 'number' },\n      { label: 'Picture', width: 100, renderer: pictureRenderer },\n      { label: 'Name', sortKey: 'name', width: 125, renderer: 'name' },\n      { label: 'Where', sortKey: 'location', width: 104, renderer: 'location' },\n      {\n        label: 'Size',\n        sortKey: 'shadow_size',\n        width: 55,\n        renderer: 'shadow_size',\n      },\n      { label: 'Time', renderer: timeRenderer },\n      { label: 'Month', width: 172, renderer: monthRenderer },\n      { label: 'Price', sortKey: 'value', width: 60, renderer: priceRenderer },\n    ],\n    [\n      caughtRenderer,\n      monthRenderer,\n      pictureRenderer,\n      priceRenderer,\n      storageRenderer,\n      timeRenderer,\n    ]\n  );\n\n  const headerRenderer = useCallback(\n    ({ columnIndex, key, rowIndex, style }) => {\n      const { label, sortKey } = columns[columnIndex];\n      const className = classNames(\n        getRowClassName({ index: rowIndex - 1, columnIndex })\n      );\n      return (\n        <HeaderCell\n          key={key}\n          sortKey={sortKey}\n          label={label}\n          className={className}\n          style={style}\n        />\n      );\n    },\n    [columns, getRowClassName]\n  );\n  const cellRenderer = useCallback(\n    ({ columnIndex, key, rowIndex, style }) => {\n      const { renderer } = columns[columnIndex];\n      const rowData = sortedTableData[rowIndex];\n      let contents = `${columnIndex}, ${rowIndex}`;\n      const className = classNames(\n        getRowClassName({ index: rowIndex, columnIndex }),\n        {\n          cell_checkbox: columnIndex === 0 || columnIndex === 1,\n        }\n      );\n      if (typeof renderer === 'string') {\n        contents = rowData[renderer];\n      } else if (typeof renderer === 'function') {\n        contents = renderer(rowData);\n      }\n      return (\n        <div key={key} style={style} className={className}>\n          {contents}\n        </div>\n      );\n    },\n    [columns, getRowClassName, sortedTableData]\n  );\n\n  const getColumnWidth = useCallback(\n    ({ index }) => {\n      return columns[index].width || 120;\n    },\n    [columns]\n  );\n\n  const getRowHeight = useCallback(({ columnIndex, key, index, style }) => {\n    return 95;\n  }, []);\n\n  const headerGridRef = useRef();\n  const bodyGridRef = useRef();\n  const handleScroll = useCallback((e) => {\n    const { scrollTop, scrollLeft } = e.target;\n    headerGridRef.current.handleScrollEvent({ scrollLeft });\n    bodyGridRef.current.handleScrollEvent({ scrollTop, scrollLeft });\n  }, []);\n  return (\n    <React.Fragment>\n      <StatusBar\n        count={sortedTableData.length}\n        hemisphere={\n          state.hemisphereFilter === HEMISPHERE_FILTER_NORTHERN\n            ? 'Northern'\n            : 'Southern'\n        }\n      />\n      <div className=\"table_container\">\n        <AutoSizer>\n          {({ width, height }) => {\n            const borderAdjustedWidth = width - 2;\n            return (\n              <ScrollSync>\n                {({\n                  clientHeight,\n                  clientWidth,\n                  onScroll,\n                  scrollHeight,\n                  scrollLeft,\n                  scrollTop,\n                  scrollWidth,\n                }) => {\n                  return (\n                    <div>\n                      <Grid\n                        ref={headerGridRef}\n                        scrollLeft={scrollLeft}\n                        columnWidth={getColumnWidth}\n                        columnCount={columns.length}\n                        rowHeight={30}\n                        cellRenderer={headerRenderer}\n                        rowCount={1}\n                        height={30}\n                        width={borderAdjustedWidth}\n                        style={headerGridStyle}\n                      />\n                      <Scrollbars\n                        onScroll={handleScroll}\n                        style={{\n                          height: height - 30 - 2,\n                          width: borderAdjustedWidth,\n                        }}\n                        autoHide\n                      >\n                        <Grid\n                          ref={bodyGridRef}\n                          onScroll={onScroll}\n                          cellRenderer={cellRenderer}\n                          columnWidth={getColumnWidth}\n                          columnCount={columns.length}\n                          height={height - 30 - 2}\n                          width={borderAdjustedWidth}\n                          rowHeight={getRowHeight}\n                          rowCount={sortedTableData.length}\n                          // Prevents flickering on horizontal scan on mobile\n                          overscanColumnCount={5}\n                          overscanRowCount={10}\n                          style={bodyGridStyle}\n                        />\n                      </Scrollbars>\n                    </div>\n                  );\n                }}\n              </ScrollSync>\n            );\n          }}\n        </AutoSizer>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default React.memo(CritterTable);\n","import React, { useReducer } from 'react';\nimport Controls from 'Components/controls';\nimport CritterTable from 'Components/critter-table';\nimport './App.css';\n\nimport {\n  reducer,\n  initialState,\n  DispatchContext,\n  StateContext,\n} from './Reducer';\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <DispatchContext.Provider value={dispatch}>\n      <StateContext.Provider value={state}>\n        <div className=\"root_container\">\n          <div className=\"controls_container\">\n            <Controls />\n          </div>\n          <CritterTable />\n        </div>\n      </StateContext.Provider>\n    </DispatchContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}