{"version":3,"sources":["Utility/constants.js","Reducer/index.js","Reducer/actionTypes.js","Components/control-elements/hemisphere-control.jsx","Components/control-elements/hour-format-control.jsx","Components/control-elements/export-state.jsx","Components/control-elements/import-state.jsx","Components/control-elements/active-month-control.jsx","useInterval.js","Components/control-elements/active-time-control.jsx","Components/more-controls-modal.jsx","Components/control-elements/more-controls-trigger.jsx","Components/control-elements/search-input.jsx","Components/control-elements/hide-caught-control.jsx","Components/control-elements/availibility-control.jsx","Components/control-elements/critter-type-control.jsx","Components/control-elements/month-time-display.jsx","Components/controls.jsx","Data/formatted-data.js","Components/cells/caught-cell.jsx","Components/cells/storage-cell.jsx","Components/cells/header-cell.jsx","Components/cells/picture-cell.jsx","Components/cells/month-cell.jsx","Components/cells/time-cell.jsx","Components/status-bar.jsx","Components/critter-table.jsx","App.jsx","serviceWorker.js","index.js"],"names":["n","MONTHS","FULL_DAY_ARRAY","Array","keys","d","Date","BOOT_CURRENT_MONTH_INDEX","getMonth","BOOT_CURRENT_HOUR_INDEX","getHours","BOOT_CURRENT_MINUTE_INDEX","getMinutes","StateContext","React","createContext","DispatchContext","lzSavedState","localStorage","getItem","savedStateString","LZString","decompressFromBase64","savedState","JSON","parse","initialFilterState","hideCaught","monthFilter","typeFilter","searchValue","sortColumn","sortDirection","minuteOffset","initialState","caughtCritter","storageCritter","timeFormat","hemisphereFilter","storageValue","previewMonthIndex","reducer","previousState","state","type","payload","previousSortColumn","previousSortDirection","appState","newStorageValue","compressToBase64","stringify","setItem","memo","dispatch","useContext","toggleHemisphere","useCallback","style","display","flexDirection","p","hyphens","fontWeight","className","classNames","onClick","toggleTimeFormat","ExportState","inputRef","useRef","padding","htmlFor","id","borderRadius","onSelect","inputElem","current","setSelectionRange","value","length","ref","readOnly","ImportState","useState","importInputText","setImportInputText","handleChange","e","target","handleClick","alert","paddingRight","flex","placeholder","onChange","marginLeft","bg","optionValue","parseInt","useMemo","undefined","name","sx","map","month","i","key","useInterval","callback","delay","savedCallback","useEffect","setInterval","clearInterval","isValidDate","setIsValidDate","isFocused","setIsFocused","is12HrFormat","calcDisplayedTime","currentHours","getTime","currentMinutes","currentIsAm","toString","padStart","digits","ampm","timeText","setTimeText","lastValidTime","setLastValidTime","isAm","setIsAm","updateCurrentTime","calculateOffset","d1","split","hours","minutes","d2","getFullYear","getDate","getSeconds","getMilliseconds","val","validTime","match","toggleAmPm","handleFocus","handleBlur","width","backgroundColor","onFocus","onBlur","MoreControlsModal","closeModal","getLegendCell","emoji","text","alignItems","flexGrow","activeHourText","notActiveHourText","activeMonthText","expiringMonthText","notActiveMonthText","Fragment","marginTop","marginBottom","color","fontSize","cursor","position","role","aria-label","textAlign","MoreControlsTrigger","setIsModalOpen","isModalOpen","openModal","variant","marginRight","lineHeight","isClearButtonShown","m","isChecked","justifyContent","checked","select_is_active","select_is_expiring","time","displayedTime","setDisplayedTime","updateDisplayedTime","navigateToModal","preventDefault","height","href","flexWrap","paddingBottom","getNLengthArray","fishData","require","bugData","seaData","fossilData","FULL_YEAR_SET","Set","FULL_DAY_SET","formatTime12","hourIndex","number","suffix","formatTime24","calculateActiveMonths","monthTuples","isSouth","activeMonths","forEach","start","end","add","formattedData","rowData","concat","timeTuples","rest","activeMonthsNorth","activeMonthsSouth","activeHours","activeHoursText12","activeHoursText24","push","caughtKey","isCaught","storageKey","isStorage","label","sortKey","headerStyle","sortIcon","src","process","alt","has","activeHoursText","currentHour","currentMinute","hour","left","Math","floor","StatusBar","count","hemisphere","handleClickReset","paddingLeft","headerGridStyle","overflowX","overflowY","bodyGridStyle","setCurrentHour","setCurrentMinute","offset","window","addEventListener","removeEventListener","isCurrentMonthActive","isCurrentMonthExpiring","monthIndex","nextMonthIndex","getNextMonthIndex","isCurrentTimeActive","localeAwareData","tableData","filter","location","displayed","toLowerCase","includes","sortFn","a","b","isAsc","aVal","bVal","sortedTableData","sort","getRowClassName","index","columnIndex","baseClassNames","currentMonthActive","currentMonthExpiring","currentTimeActive","cell_month_active","cell_month_expiring","cell_month_inactive","cell_first","cell_last","cell_padded","caughtRenderer","storageRenderer","pictureRenderer","timeRenderer","monthRenderer","priceRenderer","toLocaleString","columns","renderer","headerRenderer","rowIndex","cellRenderer","contents","cell_checkbox","getColumnWidth","getRowHeight","headerGridRef","bodyGridRef","handleScroll","scrollTop","scrollLeft","handleScrollEvent","borderAdjustedWidth","clientHeight","clientWidth","onScroll","scrollHeight","scrollWidth","columnWidth","columnCount","rowHeight","rowCount","autoHide","overscanColumnCount","overscanRowCount","App","useReducer","Provider","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7f5a6396.chunk.js","sourcesContent":["export const MONTHS = [\n  'Jan',\n  'Feb',\n  'Mar',\n  'Apr',\n  'May',\n  'June',\n  'July',\n  'Aug',\n  'Sept',\n  'Oct',\n  'Nov',\n  'Dec',\n];\n\nconst getNLengthArray = (n) => [...Array(n).keys()];\nexport const FULL_DAY_ARRAY = getNLengthArray(24);\n\nvar d = new Date();\nexport const BOOT_CURRENT_MONTH_INDEX = d.getMonth();\nexport const BOOT_CURRENT_HOUR_INDEX = d.getHours();\nexport const BOOT_CURRENT_MINUTE_INDEX = d.getMinutes();\nexport const MONTH_FILTER_ACTIVE = 'MONTH_FILTER_ACTIVE';\nexport const MONTH_FILTER_EXPIRING = 'MONTH_FILTER_EXPIRING';\nexport const TYPE_FILTER_FISH = 'TYPE_FILTER_FISH';\nexport const TYPE_FILTER_BUGS = 'TYPE_FILTER_BUGS';\nexport const TYPE_FILTER_SEA = 'TYPE_FILTER_SEA';\nexport const TYPE_FILTER_FOSSILS = 'TYPE_FILTER_FOSSILS';\n\nexport const HEMISPHERE_FILTER_NORTHERN = 'HEMISPHERE_FILTER_NORTHERN';\nexport const HEMISPHERE_FILTER_SOUTHERN = 'HEMISPHERE_FILTER_SOUTHERN';\n\nexport const TIME_FORMAT_12 = 'TIME_FORMAT_12';\nexport const TIME_FORMAT_24 = 'TIME_FORMAT_24';\n","import React from 'react';\nimport LZString from 'lz-string';\n\nimport {\n  CHANGE_PREVIEW_MONTH,\n  TOGGLE_CRITTER_CAUGHT,\n  TOGGLE_CRITTER_IN_STORAGE,\n  TOGGLE_HIDE_CAUGHT,\n  CHANGE_MONTH_FILTER,\n  CHANGE_TYPE_FILTER,\n  CHANGE_HEMISPHERE,\n  CHANGE_OFFSET,\n  SEARCH,\n  CHANGE_TIME_FORMAT,\n  IMPORT_STATE,\n  FILTER_RESET,\n  SORT_COLUMN,\n} from './actionTypes';\nimport {\n  BOOT_CURRENT_MONTH_INDEX,\n  HEMISPHERE_FILTER_NORTHERN,\n  TIME_FORMAT_12,\n} from 'Utility/constants';\n\nexport const StateContext = React.createContext();\nexport const DispatchContext = React.createContext();\n\nconst lzSavedState = localStorage.getItem('acnh_store_lz');\n\nconst savedStateString = lzSavedState\n  ? LZString.decompressFromBase64(lzSavedState)\n  : localStorage.getItem('acnh_store');\nconst savedState = JSON.parse(savedStateString) || {};\n\nconst initialFilterState = {\n  hideCaught: false,\n  monthFilter: '',\n  typeFilter: '',\n  searchValue: '',\n  sortColumn: '',\n  sortDirection: 0,\n  minuteOffset: 0,\n};\nexport const initialState = {\n  // previewMonthIndex: BOOT_CURRENT_MONTH_INDEX,\n  caughtCritter: {},\n  storageCritter: {},\n  ...initialFilterState,\n  timeFormat: TIME_FORMAT_12,\n  hemisphereFilter: HEMISPHERE_FILTER_NORTHERN,\n  storageValue: localStorage.getItem('acnh_store_lz'),\n  ...savedState,\n  // TODO: Don't reset the preview month from persisted store, since it's pretty confusing when you land on the wrong month after coming back\n  // Maybe can be solved be adding styles to denote you're previewing a month in the future\n  previewMonthIndex: BOOT_CURRENT_MONTH_INDEX,\n};\n\nexport function reducer(previousState, { type, payload }) {\n  let state;\n  switch (type) {\n    case FILTER_RESET: {\n      state = {\n        ...previousState,\n        previewMonthIndex: BOOT_CURRENT_MONTH_INDEX,\n        ...initialFilterState,\n      };\n      break;\n    }\n    case IMPORT_STATE:\n      state = JSON.parse(LZString.decompressFromBase64(payload));\n      break;\n    case CHANGE_PREVIEW_MONTH: {\n      state = { ...previousState, previewMonthIndex: payload };\n      break;\n    }\n    case TOGGLE_CRITTER_CAUGHT: {\n      //TODO maybe use thunks. So logic isn't in the reducer\n      const caughtCritter = { ...previousState.caughtCritter };\n      if (previousState.caughtCritter[payload]) {\n        delete caughtCritter[payload];\n      } else {\n        caughtCritter[payload] = true;\n      }\n      //TODO maybe throttle this with thunks\n      state = { ...previousState, caughtCritter };\n      break;\n    }\n    case TOGGLE_CRITTER_IN_STORAGE: {\n      //TODO maybe use thunks. So logic isn't in the reducer\n      const storageCritter = { ...previousState.storageCritter };\n      if (previousState.storageCritter[payload]) {\n        delete storageCritter[payload];\n      } else {\n        storageCritter[payload] = true;\n      }\n      //TODO maybe throttle this with thunks\n      state = { ...previousState, storageCritter };\n      break;\n    }\n    case TOGGLE_HIDE_CAUGHT: {\n      state = { ...previousState, hideCaught: !previousState.hideCaught };\n      break;\n    }\n    case CHANGE_MONTH_FILTER: {\n      state = { ...previousState, monthFilter: payload };\n      break;\n    }\n    case CHANGE_TYPE_FILTER: {\n      state = { ...previousState, typeFilter: payload };\n      break;\n    }\n    case CHANGE_HEMISPHERE: {\n      state = { ...previousState, hemisphereFilter: payload };\n      break;\n    }\n    case CHANGE_OFFSET: {\n      state = { ...previousState, minuteOffset: payload };\n      break;\n    }\n    case SEARCH: {\n      state = { ...previousState, searchValue: payload };\n      break;\n    }\n    case CHANGE_TIME_FORMAT: {\n      state = { ...previousState, timeFormat: payload };\n      break;\n    }\n    case SORT_COLUMN: {\n      const {\n        sortColumn: previousSortColumn,\n        sortDirection: previousSortDirection,\n      } = previousState;\n\n      /**\n       * 0 === unfiltered\n       * 1 === asc\n       * 2 === desc\n       */\n      const sortDirection =\n        previousSortColumn === payload ? (previousSortDirection + 1) % 3 : 1;\n\n      state = { ...previousState, sortColumn: payload, sortDirection };\n      break;\n    }\n    default:\n      state = previousState;\n  }\n\n  if (state !== previousState) {\n    const { storageValue, ...appState } = state;\n    const newStorageValue = LZString.compressToBase64(JSON.stringify(appState));\n    // Save storage value on state to share with export component\n    state.storageValue = newStorageValue;\n    localStorage.setItem('acnh_store_lz', newStorageValue);\n  }\n  return state;\n}\n","export const CHANGE_PREVIEW_MONTH = 'CHANGE_PREVIEW_MONTH';\nexport const TOGGLE_CRITTER_CAUGHT = 'TOGGLE_CRITTER_CAUGHT';\nexport const TOGGLE_CRITTER_IN_STORAGE = 'TOGGLE_CRITTER_IN_STORAGE';\nexport const TOGGLE_HIDE_CAUGHT = 'TOGGLE_HIDE_CAUGHT';\nexport const CHANGE_MONTH_FILTER = 'CHANGE_MONTH_FILTER';\nexport const CHANGE_TYPE_FILTER = 'CHANGE_TYPE_FILTER';\nexport const CHANGE_HEMISPHERE = 'CHANGE_HEMISPHERE';\nexport const CHANGE_OFFSET = 'CHANGE_OFFSET';\nexport const SEARCH = 'SEARCH';\nexport const CHANGE_TIME_FORMAT = 'CHANGE_TIME_FORMAT';\nexport const IMPORT_STATE = 'IMPORT_STATE';\nexport const FILTER_RESET = 'FILTER_RESET';\nexport const SORT_COLUMN = 'SORT_COLUMN';\n","import React, { useContext, useCallback } from 'react';\nimport classNames from 'classnames';\nimport { DispatchContext, StateContext } from 'Reducer';\nimport { CHANGE_HEMISPHERE } from 'Reducer/actionTypes';\nimport { Label } from '@rebass/forms';\nimport {\n  HEMISPHERE_FILTER_NORTHERN,\n  HEMISPHERE_FILTER_SOUTHERN,\n} from 'Utility/constants';\n\nfunction HemisphereControl() {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const toggleHemisphere = useCallback(() => {\n    if (state.hemisphereFilter === HEMISPHERE_FILTER_NORTHERN) {\n      dispatch({\n        type: CHANGE_HEMISPHERE,\n        payload: HEMISPHERE_FILTER_SOUTHERN,\n      });\n    } else {\n      dispatch({\n        type: CHANGE_HEMISPHERE,\n        payload: HEMISPHERE_FILTER_NORTHERN,\n      });\n    }\n  }, [state.hemisphereFilter, dispatch]);\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <Label p={1} style={{ hyphens: 'auto', fontWeight: 600 }}>\n        Hemisphere\n      </Label>\n      <div\n        className={classNames('toggle_button_group', {\n          'toggle_button_group--on':\n            state.hemisphereFilter === HEMISPHERE_FILTER_SOUTHERN,\n        })}\n        onClick={toggleHemisphere}\n      >\n        <div>Northern</div>\n        <div>Southern</div>\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(HemisphereControl);\n","import React, { useContext, useCallback } from 'react';\nimport classNames from 'classnames';\nimport { DispatchContext, StateContext } from 'Reducer';\nimport { CHANGE_TIME_FORMAT } from 'Reducer/actionTypes';\nimport { Label } from '@rebass/forms';\nimport { TIME_FORMAT_12, TIME_FORMAT_24 } from 'Utility/constants';\n\nfunction HourFormatControl() {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const toggleTimeFormat = useCallback(() => {\n    dispatch({\n      type: CHANGE_TIME_FORMAT,\n      payload:\n        state.timeFormat === TIME_FORMAT_12 ? TIME_FORMAT_24 : TIME_FORMAT_12,\n    });\n  }, [state.timeFormat, dispatch]);\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <Label p={1} style={{ fontWeight: 600 }}>\n        Time Format\n      </Label>\n      <div\n        className={classNames('toggle_button_group', {\n          'toggle_button_group--on': state.timeFormat === TIME_FORMAT_24,\n        })}\n        onClick={toggleTimeFormat}\n      >\n        <div>12 Hour</div>\n        <div>24 Hour </div>\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(HourFormatControl);\n","import React, { useRef, useContext } from 'react';\n\nimport { Input, Label } from '@rebass/forms';\nimport { StateContext } from 'Reducer';\n\nfunction ExportState() {\n  const inputRef = useRef();\n  const state = useContext(StateContext);\n\n  return (\n    <div>\n      <Label padding={1} htmlFor=\"export_state_input\">\n        Export State (Copy for other device)\n      </Label>\n      <Input\n        id=\"export_state_input\"\n        style={{ borderRadius: 5 }}\n        onSelect={() => {\n          const inputElem = inputRef?.current;\n          if (inputElem) {\n            inputElem.setSelectionRange(0, inputElem.value.length);\n          }\n        }}\n        ref={inputRef}\n        value={state.storageValue}\n        readOnly\n      />\n    </div>\n  );\n}\n\nexport default ExportState;\n","import React, { useState, useCallback, useContext } from 'react';\nimport LZString from 'lz-string';\n\nimport { Label, Input } from '@rebass/forms';\nimport { Flex, Box, Button } from 'rebass';\nimport { DispatchContext } from 'Reducer';\nimport { IMPORT_STATE } from 'Reducer/actionTypes';\n\nfunction ImportState() {\n  const dispatch = useContext(DispatchContext);\n  const [importInputText, setImportInputText] = useState('');\n\n  const handleChange = useCallback((e) => {\n    setImportInputText(e.target.value);\n  }, []);\n\n  const handleClick = useCallback(() => {\n    // Validate that string decompresses to JSON\n    try {\n      JSON.parse(LZString.decompressFromBase64(importInputText));\n    } catch (e) {\n      alert('Invalid string provided. String decompresses to invalid JSON.');\n    }\n\n    dispatch({ type: IMPORT_STATE, payload: importInputText });\n  }, [dispatch, importInputText]);\n\n  return (\n    <div>\n      <Label padding={1} htmlFor=\"import_state_input\">\n        Import State (Paste from other device)\n      </Label>\n      <Flex>\n        <Box paddingRight={1} flex=\"1 1 auto\">\n          <Input\n            id=\"import_state_input\"\n            placeholder=\"From other device...\"\n            style={{ borderRadius: 5 }}\n            onChange={handleChange}\n            value={importInputText}\n          />\n        </Box>\n        <Box marginLeft={1}>\n          <Button\n            bg=\"rgb(51, 152, 247)\"\n            style={{ fontWeight: 600 }}\n            onClick={handleClick}\n          >\n            Import\n          </Button>\n        </Box>\n      </Flex>\n    </div>\n  );\n}\n\nexport default ImportState;\n","import React, { useMemo, useContext, useCallback } from 'react';\nimport { DispatchContext, StateContext } from 'Reducer';\nimport { CHANGE_PREVIEW_MONTH } from 'Reducer/actionTypes';\nimport { Label, Select } from '@rebass/forms';\nimport { BOOT_CURRENT_MONTH_INDEX, MONTHS } from 'Utility/constants';\n\nfunction ActiveMonthControl() {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const handleChange = useCallback(\n    (e) => {\n      const optionValue = e.target.value;\n      const payload = optionValue === '' ? null : parseInt(optionValue, 10);\n      dispatch({ type: CHANGE_PREVIEW_MONTH, payload });\n    },\n    [dispatch]\n  );\n\n  const value = useMemo(() => state.previewMonthIndex, [\n    state.previewMonthIndex,\n  ]);\n\n  return (\n    <div>\n      <Label p={1} style={{ fontWeight: 600 }} htmlFor=\"active_month\">\n        Active Month\n      </Label>\n      <Select\n        fontWeight={\n          state.previewMonthIndex === BOOT_CURRENT_MONTH_INDEX ? 800 : undefined\n        }\n        id=\"active_month\"\n        name=\"Active Month\"\n        value={value}\n        onChange={handleChange}\n        sx={{\n          borderRadius: 5,\n        }}\n      >\n        {MONTHS.map((month, i) => (\n          <option key={i} value={i}>\n            {month}\n          </option>\n        ))}\n        ))}\n      </Select>\n    </div>\n  );\n}\n\nexport default React.memo(ActiveMonthControl);\n","import { useEffect, useRef } from 'react';\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;\n","import React, {\n  useMemo,\n  useEffect,\n  useContext,\n  useCallback,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { DispatchContext, StateContext } from 'Reducer';\nimport { Label, Input } from '@rebass/forms';\nimport { TIME_FORMAT_12 } from 'Utility/constants';\nimport { Box, Flex } from 'rebass';\nimport { CHANGE_OFFSET } from 'Reducer/actionTypes';\nimport useInterval from 'useInterval';\n\nfunction ActiveTimeControl() {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const [isValidDate, setIsValidDate] = useState(true);\n  const [isFocused, setIsFocused] = useState(false);\n\n  const is12HrFormat = useMemo(() => state.timeFormat === TIME_FORMAT_12, [\n    state.timeFormat,\n  ]);\n\n  // Helper function to calculate current displayed time\n  const calcDisplayedTime = useCallback(() => {\n    let d = new Date();\n    d = new Date(d.getTime() + (state.minuteOffset || 0) * 60 * 1000);\n\n    let currentHours = d.getHours();\n    let currentMinutes = d.getMinutes();\n    let currentIsAm = true;\n    if (is12HrFormat) {\n      if (currentHours > 11) {\n        currentIsAm = false;\n      }\n      if (currentHours === 0) {\n        currentHours = 12;\n      } else if (currentHours > 12) {\n        currentHours = currentHours % 12;\n      }\n    } else {\n      //\n    }\n\n    return [\n      `${currentHours}:${currentMinutes.toString().padStart(2, '0')}`,\n      currentIsAm,\n    ];\n  }, [is12HrFormat, state.minuteOffset]);\n\n  // Calculate and set initial values for `setState`\n  const [digits, ampm] = calcDisplayedTime();\n\n  const [timeText, setTimeText] = useState(digits);\n  const [lastValidTime, setLastValidTime] = useState(digits);\n  const [isAm, setIsAm] = useState(ampm);\n\n  // Every second, update the displayed time so the input value syncs with system time + offset\n  const updateCurrentTime = useCallback(() => {\n    if (isFocused) return;\n\n    const [digits, ampm] = calcDisplayedTime();\n    setTimeText(digits);\n    setIsAm(ampm);\n  }, [isFocused, calcDisplayedTime]);\n\n  useInterval(updateCurrentTime, 1000);\n\n  // Calc and store offset from system time to active time in reducer\n  const calculateOffset = useCallback(() => {\n    if (!isValidDate) return;\n    setLastValidTime(timeText);\n\n    const d1 = new Date();\n    let [hours, minutes] = timeText.split(':');\n    if (is12HrFormat) {\n      if (hours === '12') {\n        hours = 0;\n      }\n    }\n    if (!isAm && parseInt(hours, 10) < 13) {\n      hours = (parseInt(hours, 10) + 12) % 24;\n    }\n\n    const d2 = new Date(\n      d1.getFullYear(),\n      d1.getMonth(),\n      d1.getDate(),\n      hours,\n      minutes,\n      d1.getSeconds(),\n      d1.getMilliseconds()\n    );\n\n    const offset = (d2 - d1) / (60 * 1000);\n    dispatch({ type: CHANGE_OFFSET, payload: offset });\n  }, [timeText, is12HrFormat, isAm, isValidDate, dispatch]);\n\n  // Text input change handler\n  const handleChange = useCallback(\n    (e) => {\n      let val = e.target.value;\n\n      /** Returning in the change handler sets text cursor to end of input. Just add warning background instead */\n      // if (!typeof val === 'string') return setTimeText(val);\n\n      // // Only allow numbers and colon\n      // if (val.match(/[^0-9:]/)) return;\n\n      // // Don't allow more than one colon\n      // if (val.match(/[:]{2,}/)) return;\n\n      // const digitLen = val.replace(':', '').length;\n      // // Only allow up to 4 digits\n      // if (digitLen > 4) return;\n\n      // if (!val.includes(':') && digitLen === 3) {\n      //   val = `${val[0]}:${val.slice(1, 3)}`;\n      // } else if (digitLen === 4) {\n      //   val = val.replace(':', '');\n      //   val = `${val.slice(0, 2)}:${val.slice(2, 4)}`;\n      // }\n      setTimeText(val);\n\n      const regex24hr = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;\n      const regex12hr = /^(([0]?[1-9]|1[0-2])(:)([0-5][0-9]))$/;\n      const validTime = !!val.match(is12HrFormat ? regex12hr : regex24hr);\n\n      setIsValidDate(validTime);\n\n      if (!validTime) return;\n      calculateOffset();\n    },\n    [calculateOffset, is12HrFormat]\n  );\n\n  // Calculate offset any time user changes time\n  useEffect(() => {\n    calculateOffset();\n  }, [calculateOffset, timeText, isAm]);\n\n  const toggleAmPm = useCallback(() => {\n    setIsAm(!isAm);\n  }, [isAm]);\n\n  const handleFocus = useCallback(() => {\n    setIsFocused(true);\n  }, [setIsFocused]);\n\n  const handleBlur = useCallback(() => {\n    calculateOffset();\n    setIsFocused(false);\n    setTimeText(lastValidTime);\n    setIsValidDate(true);\n  }, [calculateOffset, setIsFocused, setTimeText, lastValidTime]);\n\n  return (\n    <div>\n      <Label p={1} style={{ fontWeight: 600 }} htmlFor=\"active_time\">\n        Active Time\n      </Label>\n      <Flex>\n        <Box width={1}>\n          <Input\n            id=\"active_time\"\n            name=\"Active Time\"\n            value={timeText}\n            onChange={handleChange}\n            sx={{\n              borderRadius: 5,\n              backgroundColor: isValidDate ? 'initial' : '#f4cccc',\n            }}\n            onFocus={handleFocus}\n            onBlur={handleBlur}\n          />\n        </Box>\n\n        {is12HrFormat && (\n          <Box width={1 / 2}>\n            <Flex\n              marginLeft={2}\n              className={classNames('toggle_button_group', {\n                'toggle_button_group--on': !isAm,\n              })}\n              onClick={toggleAmPm}\n            >\n              <div>AM</div>\n              <div>PM</div>\n            </Flex>\n          </Box>\n        )}\n      </Flex>\n    </div>\n  );\n}\n\nexport default React.memo(ActiveTimeControl);\n","import React, { useMemo, useCallback } from 'react';\nimport { Button, Flex, Box } from 'rebass';\n\nimport ToggleHemisphere from './control-elements/hemisphere-control';\nimport ToggleTimeFormat from './control-elements/hour-format-control';\nimport ExportState from './control-elements/export-state';\nimport ImportState from './control-elements/import-state';\nimport ActiveMonthControl from './control-elements/active-month-control';\nimport ActiveTimeControl from './control-elements/active-time-control';\n\nfunction MoreControlsModal({ closeModal }) {\n  const getLegendCell = useCallback(\n    (emoji, text) => (\n      <Box>\n        <Flex alignItems=\"center\">\n          <Box>{emoji}</Box>\n          <Box flexGrow={1}>{text}</Box>\n        </Flex>\n      </Box>\n    ),\n    []\n  );\n  const activeHourText = useMemo(\n    () => getLegendCell('✅⏱', 'Available at active time'),\n    [getLegendCell]\n  );\n  const notActiveHourText = useMemo(\n    () => getLegendCell('❌⏱', 'Not available at active time'),\n    [getLegendCell]\n  );\n\n  const activeMonthText = useMemo(\n    () => getLegendCell('✅📅', 'Available in active month'),\n    [getLegendCell]\n  );\n  const expiringMonthText = useMemo(\n    () => getLegendCell('⌛️📅', 'Expiring at end of active month'),\n    [getLegendCell]\n  );\n  const notActiveMonthText = useMemo(\n    () => getLegendCell('❌📅', 'Not available in active month'),\n    [getLegendCell]\n  );\n  return (\n    <React.Fragment>\n      <div className=\"more_controls_modal_overlay\" onClick={closeModal} />\n      <div className=\"more_controls_modal\">\n        <Flex\n          padding={3}\n          flexDirection=\"column\"\n          marginTop={20}\n          marginBottom={40}\n        >\n          <Box>\n            <Button\n              padding={0}\n              onClick={closeModal}\n              color=\"black\"\n              bg=\"lightgray\"\n              fontSize={25}\n              width={30}\n              marginTop={-30}\n              style={{ cursor: 'pointer', position: 'fixed' }}\n            >\n              <span role=\"img\" aria-label=\"close\">\n                ✖️\n              </span>\n            </Button>\n          </Box>\n          <Box>\n            <ActiveMonthControl />\n          </Box>\n          <Box marginTop={3}>\n            <ActiveTimeControl />\n          </Box>\n          <Box marginTop={3}>\n            <ToggleHemisphere />\n          </Box>\n          <Box marginTop={3}>\n            <ToggleTimeFormat />\n          </Box>\n          <Box marginTop={20}>\n            <Flex flexDirection=\"column\" textAlign=\"center\">\n              <Box p={2} fontSize={20}>\n                Row Color Legend\n              </Box>\n              <Box p={2} bg=\"#9ce482\">\n                <Flex flexDirection=\"column\">\n                  {activeHourText}\n                  {activeMonthText}\n                </Flex>\n              </Box>\n              <Box p={2} bg=\"#d9ead3\">\n                <Flex flexDirection=\"column\">\n                  {notActiveHourText}\n                  {activeMonthText}\n                </Flex>\n              </Box>\n              <Box p={2} bg=\"#f8e19d\">\n                <Flex flexDirection=\"column\">\n                  {activeHourText}\n                  {expiringMonthText}\n                </Flex>\n              </Box>\n              <Box p={2} bg=\"#fff2cc\">\n                <Flex flexDirection=\"column\">\n                  {notActiveHourText}\n                  {expiringMonthText}\n                </Flex>\n              </Box>\n              <Box p={2} bg=\"#f4cccc\">\n                {notActiveMonthText}\n              </Box>\n            </Flex>\n          </Box>\n          <Box marginTop={20}>\n            <ExportState />\n          </Box>\n          <Box>\n            <ImportState />\n          </Box>\n        </Flex>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default MoreControlsModal;\n","import React, { useCallback, useState } from 'react';\n\nimport { Button } from 'rebass';\nimport MoreControlsModal from '../more-controls-modal';\n\nfunction MoreControlsTrigger({ setIsModalOpen, isModalOpen }) {\n  const openModal = useCallback(() => {\n    setIsModalOpen(true);\n  }, [setIsModalOpen]);\n\n  const closeModal = useCallback(() => {\n    setIsModalOpen(false);\n  }, [setIsModalOpen]);\n\n  return (\n    <React.Fragment>\n      <Button\n        padding={1}\n        variant=\"outline\"\n        bg=\"white\"\n        color=\"black\"\n        width={30}\n        fontSize={25}\n        marginRight={1}\n        lineHeight={1}\n        onClick={openModal}\n        style={{ cursor: 'pointer' }}\n      >\n        ☰\n      </Button>\n      {isModalOpen && <MoreControlsModal closeModal={closeModal} />}\n    </React.Fragment>\n  );\n}\n\nexport default MoreControlsTrigger;\n","import React, { useContext, useCallback, useMemo } from 'react';\nimport { DispatchContext, StateContext } from 'Reducer';\nimport { SEARCH } from 'Reducer/actionTypes';\nimport { Button } from 'rebass';\nimport { Input } from '@rebass/forms';\n\nfunction SearchInput() {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const handleChange = useCallback(\n    (e) => {\n      dispatch({ type: SEARCH, payload: e.target.value });\n    },\n    [dispatch]\n  );\n\n  const handleClick = useCallback(\n    (e) => {\n      dispatch({ type: SEARCH, payload: '' });\n    },\n    [dispatch]\n  );\n  const isClearButtonShown = useMemo(() => !!state.searchValue, [\n    state.searchValue,\n  ]);\n\n  return (\n    <div className=\"search\">\n      <Input\n        m={1 / 2}\n        id=\"search\"\n        name=\"search\"\n        style={{ borderRadius: 5, marginRight: 1 }}\n        value={state.searchValue}\n        onChange={handleChange}\n        placeholder=\"Search name or location\"\n      />\n      {isClearButtonShown && (\n        <Button className=\"search__clear_button\" p={0} onClick={handleClick}>\n          <span role=\"img\" aria-label=\"clear search\">\n            ✖️\n          </span>\n        </Button>\n      )}\n    </div>\n  );\n}\n\nexport default React.memo(SearchInput);\n","import React, { useMemo, useContext, useCallback } from 'react';\nimport { DispatchContext, StateContext } from 'Reducer';\nimport { Label, Switch } from '@rebass/forms';\nimport { TOGGLE_HIDE_CAUGHT } from 'Reducer/actionTypes';\nimport { Flex } from 'rebass';\n\nfunction HideCaughtControl() {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const handleClick = useCallback(() => {\n    dispatch({ type: TOGGLE_HIDE_CAUGHT });\n  }, [dispatch]);\n\n  const isChecked = useMemo(() => state.hideCaught, [state.hideCaught]);\n  return (\n    <Flex className=\"toggle_caught_container\">\n      <Label padding={1} htmlFor=\"hide_caught\">\n        Hide{' '}\n        <span role=\"img\" aria-label=\"checked\" style={{ lineHeight: '18px' }}>\n          🎣\n        </span>\n      </Label>\n      <Flex justifyContent=\"center\" flexDirection=\"column\" flexGrow={1}>\n        <Switch id=\"hide_caught\" checked={isChecked} onClick={handleClick} />\n      </Flex>\n    </Flex>\n  );\n}\n\nexport default React.memo(HideCaughtControl);\n","import React, { useContext, useCallback } from 'react';\nimport classNames from 'classnames';\nimport { DispatchContext, StateContext } from 'Reducer';\nimport { CHANGE_MONTH_FILTER } from 'Reducer/actionTypes';\nimport { Label, Select } from '@rebass/forms';\nimport { MONTH_FILTER_ACTIVE, MONTH_FILTER_EXPIRING } from 'Utility/constants';\n\nfunction AvailibilityControl() {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const handleChange = useCallback(\n    (e) => {\n      dispatch({ type: CHANGE_MONTH_FILTER, payload: e.target.value });\n    },\n    [dispatch]\n  );\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <Label p={1} htmlFor=\"month_filter\">\n        Availability\n      </Label>\n      <Select\n        className={classNames({\n          select_is_active: state.monthFilter === MONTH_FILTER_ACTIVE,\n          select_is_expiring: state.monthFilter === MONTH_FILTER_EXPIRING,\n        })}\n        id=\"month_filter\"\n        name=\"Month Filter\"\n        value={state.monthFilter}\n        onChange={handleChange}\n        sx={{\n          borderRadius: 5,\n        }}\n      >\n        <option key=\"all\" value=\"\">\n          All\n        </option>\n        <option key=\"active\" value={MONTH_FILTER_ACTIVE}>\n          Active\n        </option>\n        <option key=\"expiring\" value={MONTH_FILTER_EXPIRING}>\n          Expiring\n        </option>\n      </Select>\n    </div>\n  );\n}\n\nexport default React.memo(AvailibilityControl);\n","import React, { useContext, useCallback } from 'react';\nimport { DispatchContext, StateContext } from 'Reducer';\nimport { CHANGE_TYPE_FILTER } from 'Reducer/actionTypes';\nimport { Label, Select } from '@rebass/forms';\nimport {\n  TYPE_FILTER_FISH,\n  TYPE_FILTER_BUGS,\n  TYPE_FILTER_SEA,\n  TYPE_FILTER_FOSSILS,\n} from 'Utility/constants';\n\nfunction CritterTypeControl() {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const handleChange = useCallback(\n    (e) => {\n      dispatch({ type: CHANGE_TYPE_FILTER, payload: e.target.value });\n    },\n    [dispatch]\n  );\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <Label p={1} htmlFor=\"type_filter\">\n        Type\n      </Label>\n      <Select\n        id=\"type_filter\"\n        name=\"Type Filter\"\n        value={state.typeFilter}\n        onChange={handleChange}\n        sx={{\n          borderRadius: 5,\n        }}\n      >\n        <option key=\"all\" value=\"\">\n          All\n        </option>\n        <option key=\"fish\" value={TYPE_FILTER_FISH}>\n          Fish\n        </option>\n        <option key=\"bugs\" value={TYPE_FILTER_BUGS}>\n          Bugs\n        </option>\n        <option key=\"sea\" value={TYPE_FILTER_SEA}>\n          Sea\n        </option>\n        <option key=\"fossils\" value={TYPE_FILTER_FOSSILS}>\n          Fossils\n        </option>\n      </Select>\n    </div>\n  );\n}\n\nexport default React.memo(CritterTypeControl);\n","import React, { useMemo, useState, useContext, useCallback } from 'react';\nimport { StateContext } from 'Reducer';\nimport { Label } from '@rebass/forms';\nimport { MONTHS, TIME_FORMAT_12 } from 'Utility/constants';\nimport useInterval from 'useInterval';\n\nfunction MonthTimeDisplay({ setIsModalOpen }) {\n  const state = useContext(StateContext);\n  const is12HrFormat = useMemo(() => state.timeFormat === TIME_FORMAT_12, [\n    state.timeFormat,\n  ]);\n\n  const calcDisplayedTime = useCallback(\n    (am = true) => {\n      let d = new Date();\n      d = new Date(d.getTime() + (state.minuteOffset || 0) * 60 * 1000);\n\n      let currentHours = d.getHours();\n      let currentMinutes = d.getMinutes();\n\n      let currentIsAm = true;\n      if (is12HrFormat) {\n        if (currentHours > 11) {\n          currentIsAm = false;\n        }\n        if (currentHours === 0) {\n          currentHours = 12;\n        } else if (currentHours > 12) {\n          currentHours = currentHours % 12;\n        }\n      }\n\n      const time = `${currentHours}:${currentMinutes\n        .toString()\n        .padStart(2, '0')}`;\n\n      return is12HrFormat ? `${time} ${currentIsAm ? 'AM' : 'PM'}` : time;\n    },\n    [is12HrFormat, state.minuteOffset]\n  );\n\n  const [displayedTime, setDisplayedTime] = useState(calcDisplayedTime());\n\n  const updateDisplayedTime = useCallback(() => {\n    setDisplayedTime(calcDisplayedTime());\n  }, [calcDisplayedTime]);\n\n  useInterval(updateDisplayedTime, 1000);\n\n  const navigateToModal = useCallback(\n    (e) => {\n      e.preventDefault();\n      setIsModalOpen(true);\n    },\n    [setIsModalOpen]\n  );\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100%',\n      }}\n    >\n      <Label p={1} style={{ hyphens: 'auto' }}>\n        Time\n      </Label>\n      <a\n        href=\"#\"\n        onClick={navigateToModal}\n        style={{\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          textAlign: 'center',\n        }}\n      >\n        {MONTHS[state.previewMonthIndex]}\n        <br /> {displayedTime}\n      </a>\n    </div>\n  );\n}\n\nexport default React.memo(MonthTimeDisplay);\n","import React, { useState } from 'react';\nimport { Flex, Box } from 'rebass';\nimport MoreControlsTrigger from './control-elements/more-controls-trigger';\nimport SearchInput from './control-elements/search-input';\nimport HideCaughtControl from './control-elements/hide-caught-control';\nimport AvailibilityControl from './control-elements/availibility-control';\nimport CritterTypeControl from './control-elements/critter-type-control';\nimport MonthTimeDisplay from './control-elements/month-time-display';\n\nfunction Controls() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  return (\n    <Flex flexWrap=\"wrap\" width=\"100%\">\n      <Box paddingBottom={0} width={[1]}>\n        <Flex>\n          <Box>\n            <MoreControlsTrigger\n              setIsModalOpen={setIsModalOpen}\n              isModalOpen={isModalOpen}\n            />\n          </Box>\n          <Box flex=\"1 1 auto\">\n            <SearchInput />\n          </Box>\n        </Flex>\n      </Box>\n      <Box paddingRight={1} width={[1 / 4]}>\n        <MonthTimeDisplay setIsModalOpen={setIsModalOpen} />\n      </Box>\n      <Box paddingRight={1} width={[1 / 4]}>\n        <HideCaughtControl />\n      </Box>\n      <Box paddingRight={2} width={[1 / 4]}>\n        <AvailibilityControl />\n      </Box>\n      <Box width={[1 / 4]}>\n        <CritterTypeControl />\n      </Box>\n    </Flex>\n  );\n}\n\nexport default React.memo(Controls);\n","const getNLengthArray = (n) => [...Array(n).keys()];\n\nconst fishData = require('./fish_data.json');\nconst bugData = require('./bug_data.json');\nconst seaData = require('./sea_data.json');\nconst fossilData = require('./fossil_data.json');\nconst FULL_YEAR_SET = new Set(getNLengthArray(12));\nconst FULL_DAY_ARRAY = getNLengthArray(24);\nconst FULL_DAY_SET = new Set(FULL_DAY_ARRAY);\n\nfunction formatTime12(hourIndex) {\n  let number = hourIndex % 12;\n  number = number || 12;\n\n  const suffix = hourIndex / 12 < 1 ? 'AM' : 'PM';\n  return `${number}${suffix}`;\n}\n\nfunction formatTime24(hourIndex) {\n  return `${hourIndex.toString().padStart(2, '0')}:00`;\n}\n\nfunction calculateActiveMonths(monthTuples, isSouth) {\n  let activeMonths = new Set();\n  monthTuples.forEach(([start, end]) => {\n    if (start === 0 && end === 11) {\n      activeMonths = FULL_YEAR_SET;\n      return;\n    }\n    if (isSouth) {\n      start = (start + 6) % 12;\n      end = (end + 6) % 12;\n    }\n\n    while (start !== end) {\n      activeMonths.add(start);\n      start = (start + 1) % 12;\n    }\n\n    activeMonths.add(end);\n  });\n\n  return activeMonths;\n}\n\nconst formattedData = fishData\n  .map((rowData) => ({ ...rowData, type: 'fish' }))\n  .concat(bugData.map((rowData) => ({ ...rowData, type: 'bug' })))\n  .concat(seaData.map((rowData) => ({ ...rowData, type: 'sea' })))\n  .map(({ month: monthTuples, time: timeTuples, ...rest }) => {\n    const activeMonthsNorth = calculateActiveMonths(monthTuples, false);\n    const activeMonthsSouth = calculateActiveMonths(monthTuples, true);\n\n    let activeHours = new Set();\n    let activeHoursText12 = [];\n    let activeHoursText24 = [];\n    timeTuples.forEach(([start, end]) => {\n      if (start === end) {\n        activeHours = FULL_DAY_SET;\n        activeHoursText12.push('All Day');\n        activeHoursText24.push('All Day');\n        return;\n      }\n      activeHoursText12.push(`${formatTime12(start)} - ${formatTime12(end)}`);\n      activeHoursText24.push(`${formatTime24(start)} - ${formatTime24(end)}`);\n\n      while (start !== end) {\n        activeHours.add(start);\n        start++;\n        if (start > 23) {\n          start = 0;\n        }\n      }\n      // don't include end for time\n    });\n\n    return {\n      activeMonthsNorth,\n      activeMonthsSouth,\n      activeHours,\n      activeHoursText12,\n      activeHoursText24,\n      ...rest,\n    };\n  })\n  .concat(fossilData.map((rowData) => ({ ...rowData, type: 'fossil' })));\n\nexport default formattedData;\n","import React, { useMemo, useContext, useCallback } from 'react';\nimport { DispatchContext, StateContext } from 'Reducer';\nimport { TOGGLE_CRITTER_CAUGHT } from 'Reducer/actionTypes';\nimport { Label, Checkbox } from '@rebass/forms';\n\nfunction CaughtCell({ number, type }) {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const caughtKey = useMemo(() => `${type}${number}`, [type, number]);\n\n  const handleChange = useCallback(\n    (e) => {\n      dispatch({ type: TOGGLE_CRITTER_CAUGHT, payload: caughtKey });\n    },\n    [dispatch, caughtKey]\n  );\n  const isCaught = useMemo(() => {\n    return state.caughtCritter[caughtKey];\n  }, [state.caughtCritter, caughtKey]);\n  return (\n    <div>\n      <Label>\n        <Checkbox\n          id={`${type}_caught_${number}`}\n          className=\"caught_checkbox\"\n          checked={isCaught || false}\n          onChange={handleChange}\n        />\n      </Label>\n    </div>\n  );\n}\n\nexport default React.memo(CaughtCell);\n","import React, { useMemo, useContext, useCallback } from 'react';\nimport { DispatchContext, StateContext } from 'Reducer';\nimport { TOGGLE_CRITTER_IN_STORAGE } from 'Reducer/actionTypes';\nimport { Label, Checkbox } from '@rebass/forms';\n\nfunction StorageCell({ number, type }) {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const storageKey = useMemo(() => `${type}${number}`, [type, number]);\n\n  const handleChange = useCallback(\n    (e) => {\n      dispatch({ type: TOGGLE_CRITTER_IN_STORAGE, payload: storageKey });\n    },\n    [dispatch, storageKey]\n  );\n  const isStorage = useMemo(() => {\n    return state.storageCritter[storageKey];\n  }, [state.storageCritter, storageKey]);\n  return (\n    <div>\n      <Label>\n        <Checkbox\n          id={`${type}_storage_${number}`}\n          className=\"storage_checkbox\"\n          checked={isStorage || false}\n          onChange={handleChange}\n        />\n      </Label>\n    </div>\n  );\n}\n\nexport default React.memo(StorageCell);\n","import React, { useCallback, useContext, useMemo } from 'react';\nimport classNames from 'classnames';\nimport { DispatchContext, StateContext } from 'Reducer';\nimport { SORT_COLUMN } from 'Reducer/actionTypes';\n\nfunction HeaderCell({ className, style, label, sortKey }) {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const handleClick = useCallback(() => {\n    dispatch({ type: SORT_COLUMN, payload: sortKey });\n  }, [dispatch, sortKey]);\n  let headerStyle = { ...style };\n  if (sortKey) {\n    headerStyle.cursor = 'pointer';\n  }\n\n  const sortIcon = useMemo(() => {\n    if (state.sortColumn !== sortKey) return '';\n    if (state.sortDirection === 1) return '↑';\n    if (state.sortDirection === 2) return '↓';\n  }, [sortKey, state.sortColumn, state.sortDirection]);\n  return (\n    <div\n      className={classNames(className, {\n        'header_cell--sortable': sortKey,\n      })}\n      style={headerStyle}\n      onClick={sortKey ? handleClick : undefined}\n    >\n      {label} {sortIcon}\n    </div>\n  );\n}\n\nexport default React.memo(HeaderCell);\n","import React from 'react';\n\nfunction PictureCell({ number, type }) {\n  return (\n    <div>\n      <img\n        src={`${process.env.PUBLIC_URL}/${type}${number\n          .toString()\n          .padStart(2, '0')}.png`}\n        alt=\"\"\n      />\n    </div>\n  );\n}\n\nexport default React.memo(PictureCell);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { MONTHS } from 'Utility/constants';\n\nfunction MonthCell({ activeMonths, previewMonthIndex }) {\n  return (\n    <div className=\"month_container\">\n      {MONTHS.map((month, i) => (\n        <div\n          key={i}\n          className={classNames('month_square', {\n            'month_square--active': activeMonths && activeMonths.has(i),\n            'month_square--current': i === previewMonthIndex,\n          })}\n        >\n          {month}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default React.memo(MonthCell);\n","import React, { useContext } from 'react';\nimport classNames from 'classnames';\n\nimport {\n  FULL_DAY_ARRAY,\n  TIME_FORMAT_12,\n  TIME_FORMAT_24,\n} from 'Utility/constants';\nimport { StateContext } from 'Reducer';\n\nfunction TimeCell({\n  activeHours,\n  activeHoursText,\n  currentHour,\n  currentMinute,\n}) {\n  const state = useContext(StateContext);\n\n  return (\n    <div>\n      <div\n        className={classNames('hour_labels', {\n          'hour_labels--12': state.timeFormat === TIME_FORMAT_12,\n          'hour_labels--24': state.timeFormat === TIME_FORMAT_24,\n        })}\n      >\n        {state.timeFormat === TIME_FORMAT_12 ? (\n          <React.Fragment>\n            <div className=\"hour_label\">\n              AM\n              <br />\n              12\n            </div>\n            <div className=\"hour_label\">6</div>\n            <div className=\"hour_label\">\n              PM\n              <br />\n              12\n            </div>\n            <div className=\"hour_label\">6</div>\n          </React.Fragment>\n        ) : (\n          <React.Fragment>\n            <div className=\"hour_label\">0</div>\n            <div className=\"hour_label\">6</div>\n            <div className=\"hour_label\">12</div>\n            <div className=\"hour_label\">18</div>\n          </React.Fragment>\n        )}\n      </div>\n      <div className=\"hour_container\">\n        {FULL_DAY_ARRAY.map((hour, i) => (\n          <div key={i} className=\"hour_square\">\n            {activeHours && activeHours.has(i) && (\n              <div\n                className={classNames('hour_square__active', {\n                  'hour_square__active--start':\n                    activeHours && !activeHours.has((i + 23) % 24),\n                  'hour_square__active--end':\n                    activeHours && !activeHours.has((i + 1) % 24),\n                })}\n              />\n            )}\n          </div>\n        ))}\n        <div\n          className=\"hour_container__current_time_marker\"\n          style={{\n            left: 4 * currentHour + Math.floor(currentMinute / 15),\n          }}\n        />\n        <div className=\"hour_container__end_marker\" />\n      </div>\n      <div className=\"hour_text\">\n        {activeHoursText.map((text, i) => (\n          <div key={i} className=\"hour_text__entry\">\n            {text}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(TimeCell);\n","import React, { useCallback, useContext } from 'react';\nimport { Flex, Box, Button } from 'rebass';\nimport { DispatchContext } from 'Reducer';\nimport { FILTER_RESET } from 'Reducer/actionTypes';\n\nfunction StatusBar({ count = 0, hemisphere = 'Northern' }) {\n  const dispatch = useContext(DispatchContext);\n\n  const handleClickReset = useCallback(() => {\n    dispatch({ type: FILTER_RESET });\n  }, [dispatch]);\n\n  return (\n    <Flex\n      fontSize={13}\n      justifyContent=\"space-between\"\n      className=\"status_bar\"\n      alignItems=\"center\"\n    >\n      <Box>\n        Count: <b>{count}</b>\n      </Box>\n      <Box>\n        Hemisphere: <b>{hemisphere}</b>\n      </Box>\n      <Box>\n        <Button\n          bg=\"rgb(51, 152, 247)\"\n          p={1}\n          paddingLeft={1}\n          paddingRight={1}\n          onClick={handleClickReset}\n          style={{ cursor: 'pointer', fontWeight: 600 }}\n        >\n          Reset Filters\n        </Button>\n      </Box>\n    </Flex>\n  );\n}\n\nexport default StatusBar;\n","import React, {\n  useState,\n  useContext,\n  useMemo,\n  useCallback,\n  useEffect,\n  useRef,\n} from 'react';\nimport { AutoSizer, Grid, ScrollSync } from 'react-virtualized';\nimport classNames from 'classnames';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport formattedData from 'Data/formatted-data';\n\nimport { StateContext } from 'Reducer';\nimport {\n  BOOT_CURRENT_HOUR_INDEX,\n  BOOT_CURRENT_MINUTE_INDEX,\n  MONTH_FILTER_ACTIVE,\n  MONTH_FILTER_EXPIRING,\n  TYPE_FILTER_FISH,\n  TYPE_FILTER_BUGS,\n  TYPE_FILTER_SEA,\n  TYPE_FILTER_FOSSILS,\n  HEMISPHERE_FILTER_NORTHERN,\n  TIME_FORMAT_12,\n} from 'Utility/constants';\nimport CaughtCell from './cells/caught-cell';\nimport StorageCell from './cells/storage-cell';\nimport HeaderCell from './cells/header-cell';\nimport PictureCell from './cells/picture-cell';\nimport MonthCell from './cells/month-cell';\nimport TimeCell from './cells/time-cell';\nimport useInterval from 'useInterval';\nimport StatusBar from './status-bar';\n\nfunction getNextMonthIndex(monthIndex) {\n  let nextMonthIndex = monthIndex + 1;\n  if (nextMonthIndex > 11) nextMonthIndex = 0;\n  return nextMonthIndex;\n}\n\nconst headerGridStyle = { overflowX: 'hidden', overflowY: 'hidden' };\nconst bodyGridStyle = { overflowX: false, overflowY: false };\n\nfunction CritterTable() {\n  const state = useContext(StateContext);\n  const [currentHour, setCurrentHour] = useState(BOOT_CURRENT_HOUR_INDEX);\n  const [currentMinute, setCurrentMinute] = useState(BOOT_CURRENT_MINUTE_INDEX);\n\n  const updateCurrentTime = useCallback(() => {\n    const offset = state.minuteOffset || 0;\n    var d = new Date();\n    d = new Date(d.getTime() + offset * 60 * 1000);\n    setCurrentHour(d.getHours());\n    setCurrentMinute(d.getMinutes());\n  }, [state.minuteOffset]);\n\n  // Every minute, check current time to update the time graph\n  useInterval(updateCurrentTime, 60000);\n\n  // Check current time when window gains focus, since interval doesn't run in the background\n  useEffect(() => {\n    window.addEventListener('focus', updateCurrentTime);\n    return () => window.removeEventListener('focus', updateCurrentTime);\n  }, [updateCurrentTime]);\n\n  // Update time when offset is modified\n\n  useEffect(() => {\n    updateCurrentTime();\n  }, [state.minuteOffset, updateCurrentTime]);\n\n  const isCurrentMonthActive = useCallback(\n    (activeMonths) =>\n      !activeMonths ? true : activeMonths.has(state.previewMonthIndex),\n    [state.previewMonthIndex]\n  );\n\n  const isCurrentMonthExpiring = useCallback(\n    (activeMonths) =>\n      !activeMonths\n        ? true\n        : activeMonths.has(state.previewMonthIndex) &&\n          !activeMonths.has(getNextMonthIndex(state.previewMonthIndex)),\n    [state.previewMonthIndex]\n  );\n\n  const isCurrentTimeActive = useCallback(\n    (activeHours) => (!activeHours ? true : activeHours.has(currentHour)),\n    [currentHour]\n  );\n  const localeAwareData = useMemo(\n    () =>\n      formattedData.map(\n        ({\n          activeMonthsNorth,\n          activeMonthsSouth,\n          activeHoursText12,\n          activeHoursText24,\n          ...rest\n        }) => ({\n          ...rest,\n          activeMonths:\n            state.hemisphereFilter === HEMISPHERE_FILTER_NORTHERN\n              ? activeMonthsNorth\n              : activeMonthsSouth,\n          activeHoursText:\n            state.timeFormat === TIME_FORMAT_12\n              ? activeHoursText12\n              : activeHoursText24,\n        })\n      ),\n    [state.hemisphereFilter, state.timeFormat]\n  );\n\n  const tableData = useMemo(() => {\n    const filteredData = localeAwareData.filter(\n      ({ activeMonths, number, type, name, location }) => {\n        let displayed = true;\n        if (displayed && state.searchValue) {\n          displayed =\n            name?.toLowerCase().includes(state.searchValue.toLowerCase()) ||\n            location?.toLowerCase().includes(state.searchValue.toLowerCase());\n        }\n        if (displayed && state.typeFilter) {\n          if (state.typeFilter === TYPE_FILTER_FISH) {\n            displayed = type === 'fish';\n          } else if (state.typeFilter === TYPE_FILTER_BUGS) {\n            displayed = type === 'bug';\n          } else if (state.typeFilter === TYPE_FILTER_SEA) {\n            displayed = type === 'sea';\n          } else if (state.typeFilter === TYPE_FILTER_FOSSILS) {\n            displayed = type === 'fossil';\n          }\n        }\n\n        if (displayed && state.monthFilter) {\n          if (state.monthFilter === MONTH_FILTER_ACTIVE) {\n            displayed = isCurrentMonthActive(activeMonths);\n          } else if (state.monthFilter === MONTH_FILTER_EXPIRING) {\n            displayed = isCurrentMonthExpiring(activeMonths);\n          }\n        }\n        if (displayed && state.hideCaught) {\n          displayed = !state.caughtCritter[`${type}${number}`];\n        }\n        return displayed;\n      }\n    );\n    return filteredData;\n  }, [\n    localeAwareData,\n    state.searchValue,\n    state.typeFilter,\n    state.monthFilter,\n    state.hideCaught,\n    state.caughtCritter,\n    isCurrentMonthActive,\n    isCurrentMonthExpiring,\n  ]);\n\n  const sortFn = useCallback(\n    (a, b) => {\n      const isAsc = state.sortDirection === 1;\n      let aVal = a[state.sortColumn];\n      if (typeof aVal === 'string') aVal = aVal.toLowerCase();\n      let bVal = b[state.sortColumn];\n      if (typeof bVal === 'string') bVal = bVal.toLowerCase();\n\n      if (aVal === bVal) return 0;\n\n      if (!aVal) return 1;\n      if (!bVal) return -1;\n\n      if (aVal < bVal) {\n        return isAsc ? -1 : 1;\n      }\n\n      if (aVal > bVal) {\n        return isAsc ? 1 : -1;\n      }\n      return 0;\n    },\n    [state.sortColumn, state.sortDirection]\n  );\n\n  const sortedTableData = useMemo(() => {\n    return state.sortDirection === 0 ? tableData : [...tableData].sort(sortFn);\n  }, [sortFn, state.sortDirection, tableData]);\n\n  const getRowClassName = useCallback(\n    ({ index, columnIndex }) => {\n      let baseClassNames = '';\n      if (index < 0) {\n        //header;\n        baseClassNames = 'header_cell';\n      } else {\n        if (sortedTableData[index]?.type === 'fossil') {\n          baseClassNames = 'cell fossil_cell';\n        } else {\n          const currentMonthActive = isCurrentMonthActive(\n            sortedTableData[index]?.activeMonths\n          );\n\n          const currentMonthExpiring = isCurrentMonthExpiring(\n            sortedTableData[index]?.activeMonths\n          );\n          const currentTimeActive =\n            currentMonthActive || currentMonthExpiring\n              ? isCurrentTimeActive(sortedTableData[index]?.activeHours)\n              : false;\n\n          baseClassNames = classNames('cell', {\n            cell_month_active: currentMonthActive,\n            'cell_month_active--time_active':\n              currentMonthActive && currentTimeActive,\n            cell_month_expiring: currentMonthExpiring,\n            'cell_month_expiring--time_active':\n              currentMonthExpiring && currentTimeActive,\n            cell_month_inactive: !currentMonthActive,\n          });\n        }\n      }\n      return classNames(baseClassNames, {\n        cell_first: columnIndex === 0,\n        cell_last: columnIndex === 9,\n        cell_padded: columnIndex === 4 || columnIndex === 5,\n      });\n    },\n    [\n      isCurrentTimeActive,\n      isCurrentMonthActive,\n      isCurrentMonthExpiring,\n      sortedTableData,\n    ]\n  );\n\n  const caughtRenderer = useCallback(\n    ({ number, type }) => <CaughtCell number={number} type={type} />,\n    []\n  );\n  const storageRenderer = useCallback(\n    ({ number, type }) => <StorageCell number={number} type={type} />,\n    []\n  );\n  const pictureRenderer = useCallback(\n    ({ number, type }) => <PictureCell number={number} type={type} />,\n    []\n  );\n\n  const timeRenderer = useCallback(\n    ({ activeHours, activeHoursText }) =>\n      !activeHours ? null : (\n        <TimeCell\n          activeHours={activeHours}\n          activeHoursText={activeHoursText}\n          currentHour={currentHour}\n          currentMinute={currentMinute}\n        />\n      ),\n    [currentHour, currentMinute]\n  );\n\n  const monthRenderer = useCallback(\n    ({ activeMonths }) =>\n      !activeMonths ? null : (\n        <MonthCell\n          activeMonths={activeMonths}\n          previewMonthIndex={state.previewMonthIndex}\n        />\n      ),\n    [state.previewMonthIndex]\n  );\n\n  const priceRenderer = useCallback(({ value }) => value.toLocaleString(), []);\n\n  const columns = useMemo(\n    () => [\n      { label: '🎣', width: 30, renderer: caughtRenderer },\n      { label: '📦', width: 30, renderer: storageRenderer },\n      { label: '#', width: 30, renderer: 'number' },\n      { label: 'Picture', width: 100, renderer: pictureRenderer },\n      { label: 'Name', sortKey: 'name', width: 125, renderer: 'name' },\n      { label: 'Where', sortKey: 'location', width: 104, renderer: 'location' },\n      {\n        label: 'Size',\n        sortKey: 'shadow_size',\n        width: 55,\n        renderer: 'shadow_size',\n      },\n      { label: 'Time', renderer: timeRenderer },\n      { label: 'Month', width: 172, renderer: monthRenderer },\n      { label: 'Price', sortKey: 'value', width: 60, renderer: priceRenderer },\n    ],\n    [\n      caughtRenderer,\n      monthRenderer,\n      pictureRenderer,\n      priceRenderer,\n      storageRenderer,\n      timeRenderer,\n    ]\n  );\n\n  const headerRenderer = useCallback(\n    ({ columnIndex, key, rowIndex, style }) => {\n      const { label, sortKey } = columns[columnIndex];\n      const className = classNames(\n        getRowClassName({ index: rowIndex - 1, columnIndex })\n      );\n      return (\n        <HeaderCell\n          key={key}\n          sortKey={sortKey}\n          label={label}\n          className={className}\n          style={style}\n        />\n      );\n    },\n    [columns, getRowClassName]\n  );\n  const cellRenderer = useCallback(\n    ({ columnIndex, key, rowIndex, style }) => {\n      const { renderer } = columns[columnIndex];\n      const rowData = sortedTableData[rowIndex];\n      let contents = `${columnIndex}, ${rowIndex}`;\n      const className = classNames(\n        getRowClassName({ index: rowIndex, columnIndex }),\n        {\n          cell_checkbox: columnIndex === 0 || columnIndex === 1,\n        }\n      );\n      if (typeof renderer === 'string') {\n        contents = rowData[renderer];\n      } else if (typeof renderer === 'function') {\n        contents = renderer(rowData);\n      }\n      return (\n        <div key={key} style={style} className={className}>\n          {contents}\n        </div>\n      );\n    },\n    [columns, getRowClassName, sortedTableData]\n  );\n\n  const getColumnWidth = useCallback(\n    ({ index }) => {\n      return columns[index].width || 120;\n    },\n    [columns]\n  );\n\n  const getRowHeight = useCallback(({ columnIndex, key, index, style }) => {\n    return 95;\n  }, []);\n\n  const headerGridRef = useRef();\n  const bodyGridRef = useRef();\n  const handleScroll = useCallback((e) => {\n    const { scrollTop, scrollLeft } = e.target;\n    headerGridRef.current.handleScrollEvent({ scrollLeft });\n    bodyGridRef.current.handleScrollEvent({ scrollTop, scrollLeft });\n  }, []);\n  return (\n    <React.Fragment>\n      <StatusBar\n        count={sortedTableData.length}\n        hemisphere={\n          state.hemisphereFilter === HEMISPHERE_FILTER_NORTHERN\n            ? 'Northern'\n            : 'Southern'\n        }\n      />\n      <div className=\"table_container\">\n        <AutoSizer>\n          {({ width, height }) => {\n            const borderAdjustedWidth = width - 2;\n            return (\n              <ScrollSync>\n                {({\n                  clientHeight,\n                  clientWidth,\n                  onScroll,\n                  scrollHeight,\n                  scrollLeft,\n                  scrollTop,\n                  scrollWidth,\n                }) => {\n                  return (\n                    <div>\n                      <Grid\n                        ref={headerGridRef}\n                        scrollLeft={scrollLeft}\n                        columnWidth={getColumnWidth}\n                        columnCount={columns.length}\n                        rowHeight={30}\n                        cellRenderer={headerRenderer}\n                        rowCount={1}\n                        height={30}\n                        width={borderAdjustedWidth}\n                        style={headerGridStyle}\n                      />\n                      <Scrollbars\n                        onScroll={handleScroll}\n                        style={{\n                          height: height - 30 - 2,\n                          width: borderAdjustedWidth,\n                        }}\n                        autoHide\n                      >\n                        <Grid\n                          ref={bodyGridRef}\n                          onScroll={onScroll}\n                          cellRenderer={cellRenderer}\n                          columnWidth={getColumnWidth}\n                          columnCount={columns.length}\n                          height={height - 30 - 2}\n                          width={borderAdjustedWidth}\n                          rowHeight={getRowHeight}\n                          rowCount={sortedTableData.length}\n                          // Prevents flickering on horizontal scan on mobile\n                          overscanColumnCount={5}\n                          overscanRowCount={10}\n                          style={bodyGridStyle}\n                        />\n                      </Scrollbars>\n                    </div>\n                  );\n                }}\n              </ScrollSync>\n            );\n          }}\n        </AutoSizer>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default React.memo(CritterTable);\n","import React, { useReducer } from 'react';\nimport Controls from 'Components/controls';\nimport CritterTable from 'Components/critter-table';\nimport './App.css';\n\nimport {\n  reducer,\n  initialState,\n  DispatchContext,\n  StateContext,\n} from './Reducer';\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <DispatchContext.Provider value={dispatch}>\n      <StateContext.Provider value={state}>\n        <div className=\"root_container\">\n          <div className=\"controls_container\">\n            <Controls />\n          </div>\n          <CritterTable />\n        </div>\n      </StateContext.Provider>\n    </DispatchContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}