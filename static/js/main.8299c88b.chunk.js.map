{"version":3,"sources":["components/constants.js","components/utility.js","reducer/index.js","reducer/actionTypes.js","components/control-elements/PreviewMonthSelect.jsx","components/control-elements/ToggleCaughtCheckbox.jsx","components/control-elements/ToggleActiveExpiringSelect.jsx","components/control-elements/ToggleTypeSelect.jsx","components/control-elements/ToggleHemisphere.jsx","components/Controls.jsx","components/formatted-data.js","components/cells/CaughtCell.jsx","components/cells/PictureCell.jsx","components/cells/MonthsCell.jsx","components/cells/TimeCell.jsx","components/CritterTable.jsx","App.js","serviceWorker.js","index.js"],"names":["n","MONTHS","FULL_DAY_ARRAY","Array","keys","d","Date","CURRENT_MONTH_INDEX","getMonth","CURRENT_HOUR_INDEX","getHours","CURRENT_MINUTE_INDEX","getMinutes","StateContext","React","createContext","DispatchContext","savedState","JSON","parse","localStorage","getItem","initialState","caughtCritter","hideCaught","monthFilter","typeFilter","hemisphereFilter","previewMonthIndex","reducer","previousState","state","type","payload","setItem","stringify","memo","dispatch","useContext","handleChange","useCallback","e","optionValue","target","value","parseInt","useMemo","p","width","htmlFor","id","name","onChange","map","month","i","key","handleClick","isChecked","className","style","paddingTop","display","textAlign","checked","onClick","flexDirection","flexGrow","hyphens","Fragment","getNLengthArray","fishData","require","bugData","FULL_YEAR_SET","Set","FULL_DAY_SET","formatTime","hourIndex","number","suffix","calculateActiveMonths","monthTuples","isSouth","activeMonths","forEach","start","end","add","formattedData","rowData","concat","timeTuples","time","rest","activeMonthsNorth","activeMonthsSouth","activeHours","activeHoursText","push","caughtKey","isCaught","src","process","toString","padStart","alt","classNames","has","hour","left","Math","floor","text","isCurrentMonthActive","isCurrentMonthExpiring","monthIndex","nextMonthIndex","getNextMonthIndex","localeAwareData","tableData","filter","displayed","getRowClassName","index","currentMonthActive","currentMonthExpiring","cell_month_active","cell_month_expiring","cell_month_inactive","caughtRenderer","pictureRenderer","timeRenderer","monthRenderer","priceRenderer","toLocaleString","columns","label","renderer","cellRenderer","columnIndex","rowIndex","contents","cell_first","cell_padded","getColumnWidth","getRowHeight","height","enableFixedRowScroll","fixedRowCount","columnWidth","columnCount","length","rowHeight","rowCount","hideTopRightGridScrollbar","hideBottomLeftGridScrollbar","onRowsRendered","App","useReducer","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"s3iBAAyBA,E,kDCAZC,EAAS,CACpB,OACA,OACA,OACA,OACA,MACA,OACA,OACA,OACA,QACA,OACA,OACA,Q,gBDVWC,GAFYF,EAEqB,GAFtB,YAAWG,MAAMH,GAAGI,SAIxCC,EAAI,IAAIC,KACCC,EAAsBF,EAAEG,WACxBC,EAAqBJ,EAAEK,WACvBC,EAAuBN,EAAEO,aEOzBC,EAAeC,IAAMC,gBACrBC,EAAkBF,IAAMC,gBAE/BE,EAAaC,KAAKC,MAAMC,aAAaC,QAAQ,gBAAkB,GAExDC,EAAY,aAEvBC,cAAe,GACfC,YAAY,EACZC,YAAa,GACbC,WAAY,GACZC,iBFZwC,8BEarCV,EAPoB,CAUvBW,kBAAmBrB,IAGd,SAASsB,EAAQC,EAAjB,GAAoD,IACrDC,EADmCC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,QAE7C,OAAQD,GACN,ICnCgC,uBDoC9BD,EAAK,eAAQD,EAAR,CAAuBF,kBAAmBK,IAC/C,MACF,ICrCiC,wBDuC/B,IAAMV,EAAa,eAAQO,EAAcP,eACrCO,EAAcP,cAAcU,UACvBV,EAAcU,GAErBV,EAAcU,IAAW,EAG3BF,EAAK,eAAQD,EAAR,CAAuBP,kBAC5B,MAEF,IChD8B,qBDiD5BQ,EAAK,eAAQD,EAAR,CAAuBN,YAAaM,EAAcN,aACvD,MAEF,ICnD+B,sBDoD7BO,EAAK,eAAQD,EAAR,CAAuBL,YAAaQ,IACzC,MAEF,ICtD8B,qBDuD5BF,EAAK,eAAQD,EAAR,CAAuBJ,WAAYO,IACxC,MAEF,ICzD6B,oBD0D3BF,EAAK,eAAQD,EAAR,CAAuBH,iBAAkBM,IAC9C,MAEF,QACEF,EAAQD,EAMZ,OAHIC,IAAUD,GACZV,aAAac,QAAQ,aAAchB,KAAKiB,UAAUJ,IAE7CA,E,oBE3BMjB,UAAMsB,MAvCrB,WACE,IAAMC,EAAWC,qBAAWtB,GACtBe,EAAQO,qBAAWzB,GAEnB0B,EAAeC,uBACnB,SAACC,GACC,IAAMC,EAAcD,EAAEE,OAAOC,MACvBX,EAA0B,KAAhBS,EAAqB,KAAOG,SAASH,EAAa,IAClEL,EAAS,CAAEL,KDfmB,uBCeSC,cAEzC,CAACI,IAGGO,EAAQE,mBAAQ,kBAAMf,EAAMH,oBAAmB,CACnDG,EAAMH,oBAGR,OACE,kBAAC,IAAD,CAAKmB,EAAG,EAAGC,MAAO,CAAC,EAAG,EAAG,KACvB,kBAAC,IAAD,CAAOD,EAAG,EAAGE,QAAQ,gBAArB,gBAGA,kBAAC,IAAD,CACEC,GAAG,eACHC,KAAK,eACLP,MAAOA,EACPQ,SAAUb,GAETtC,EAAOoD,KAAI,SAACC,EAAOC,GAAR,OACV,4BAAQC,IAAKD,EAAGX,MAAOW,GACpBD,MARP,WCCSxC,UAAMsB,MAxBrB,WACE,IAAMC,EAAWC,qBAAWtB,GACtBe,EAAQO,qBAAWzB,GAEnB4C,EAAcjB,uBAAY,WAC9BH,EAAS,CAAEL,KFTmB,yBEU7B,CAACK,IAEEqB,EAAYZ,mBAAQ,kBAAMf,EAAMP,aAAY,CAACO,EAAMP,aACzD,OACE,kBAAC,IAAD,CAAKuB,EAAG,EAAGC,MAAO,CAAC,EAAG,EAAG,IAAQW,UAAU,2BACzC,kBAAC,IAAD,CACEV,QAAQ,cACRW,MAAO,CAAEC,WAAY,EAAGC,QAAS,QAASC,UAAW,WAFvD,eAMA,yBAAKJ,UAAU,wBACb,kBAAC,IAAD,CAAQT,GAAG,cAAcc,QAASN,EAAWO,QAASR,SC0B/C3C,UAAMsB,MA3CrB,WACE,IAAMC,EAAWC,qBAAWtB,GACtBe,EAAQO,qBAAWzB,GAEnB0B,EAAeC,uBACnB,SAACC,GACCJ,EAAS,CAAEL,KHVkB,sBGUSC,QAASQ,EAAEE,OAAOC,UAE1D,CAACP,IAGH,OACE,kBAAC,IAAD,CACEU,EAAG,EACHC,MAAO,CAAC,EAAG,EAAG,IACdY,MAAO,CACLE,QAAS,OACTI,cAAe,WAGjB,kBAAC,IAAD,CAAOnB,EAAG,EAAGE,QAAQ,eAAeW,MAAO,CAAEO,SAAU,IAAvD,SAGA,kBAAC,IAAD,CACEjB,GAAG,eACHC,KAAK,eACLP,MAAOb,EAAMN,YACb2B,SAAUb,GAEV,4BAAQiB,IAAI,MAAMZ,MAAM,IAAxB,OAGA,4BAAQY,IAAI,SAASZ,MN/BM,uBM+B3B,UAGA,4BAAQY,IAAI,WAAWZ,MNjCM,yBMiC7B,iBCQO9B,UAAMsB,MA3CrB,WACE,IAAMC,EAAWC,qBAAWtB,GACtBe,EAAQO,qBAAWzB,GAEnB0B,EAAeC,uBACnB,SAACC,GACCJ,EAAS,CAAEL,KJTiB,qBISSC,QAASQ,EAAEE,OAAOC,UAEzD,CAACP,IAGH,OACE,kBAAC,IAAD,CACEU,EAAG,EACHC,MAAO,CAAC,EAAG,EAAG,IACdY,MAAO,CACLE,QAAS,OACTI,cAAe,WAGjB,kBAAC,IAAD,CAAOnB,EAAG,EAAGE,QAAQ,cAAcW,MAAO,CAAEO,SAAU,IAAtD,QAGA,kBAAC,IAAD,CACEjB,GAAG,cACHC,KAAK,cACLP,MAAOb,EAAML,WACb0B,SAAUb,GAEV,4BAAQiB,IAAI,MAAMZ,MAAM,IAAxB,OAGA,4BAAQY,IAAI,SAASZ,MP7BG,oBO6BxB,QAGA,4BAAQY,IAAI,WAAWZ,MP/BC,oBO+BxB,aCYO9B,UAAMsB,MA5CrB,WACE,IAAMC,EAAWC,qBAAWtB,GACtBe,EAAQO,qBAAWzB,GAEnB0B,EAAeC,uBACnB,SAACC,GACCJ,EAAS,CAAEL,KLXgB,oBKWSC,QAASQ,EAAEE,OAAOC,UAExD,CAACP,IAGH,OACE,kBAAC,IAAD,CACEU,EAAG,EACHC,MAAO,CAAC,EAAG,EAAG,IACdY,MAAO,CACLE,QAAS,OACTI,cAAe,WAGjB,kBAAC,IAAD,CACEnB,EAAG,EACHE,QAAQ,oBACRW,MAAO,CAAEO,SAAU,EAAGC,QAAS,SAHjC,cAOA,kBAAC,IAAD,CACElB,GAAG,oBACHC,KAAK,oBACLP,MAAOb,EAAMJ,iBACbyB,SAAUb,GAEV,4BAAQiB,IAAI,SAASZ,MR9Ba,8BQ8BlC,YAGA,4BAAQY,IAAI,WAAWZ,MRhCW,8BQgClC,iBC1BO9B,UAAMsB,MAZrB,WACE,OACE,kBAAC,IAAMiC,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,U,iCCfAC,EAAkB,SAACtE,GAAD,mBAAWG,MAAMH,GAAGI,SAEtCmE,EAAWC,EAAQ,KACnBC,EAAUD,EAAQ,KAClBE,EAAgB,IAAIC,IAAIL,EAAgB,KACxCpE,EAAiBoE,EAAgB,IACjCM,EAAe,IAAID,IAAIzE,GAE7B,SAAS2E,EAAWC,GAClB,IAAIC,EAASD,EAAY,GAGnBE,EAASF,EAAY,GAAK,EAAI,KAAO,KAC3C,MAAM,GAAN,OAHAC,EAASA,GAAU,IAGnB,OAAmBC,GAGrB,SAASC,EAAsBC,EAAaC,GAC1C,IAAIC,EAAe,IAAIT,IAyBvB,OAxBAO,EAAYG,SAAQ,YAAmB,IAAD,mBAAhBC,EAAgB,KAATC,EAAS,KAQpC,GANIJ,IAEY,KADdG,GAASA,EAAQ,GAAK,MACLA,EAAQ,IAEb,KADZC,GAAOA,EAAM,GAAK,MACHA,EAAM,KAET,IAAVD,GAAuB,KAARC,EAAnB,CAKA,KAAOD,IAAUC,GACfH,EAAaI,IAAIF,EAAQ,KACzBA,EACY,KACVA,EAAQ,GAIZF,EAAaI,IAAID,EAAM,QAZrBH,EAAeV,KAeZU,EAGT,IAoCeK,EApCOlB,EACnBlB,KAAI,SAACqC,GAAD,sBAAmBA,EAAnB,CAA4B1D,KAAM,YACtC2D,OAAOlB,EAAQpB,KAAI,SAACqC,GAAD,sBAAmBA,EAAnB,CAA4B1D,KAAM,YACrDqB,KAAI,YAAwD,IAA9C6B,EAA6C,EAApD5B,MAA0BsC,EAA0B,EAAhCC,KAAqBC,EAAW,gCACpDC,EAAoBd,EAAsBC,GAAa,GACvDc,EAAoBf,EAAsBC,GAAa,GAEzDe,EAAc,IAAItB,IAClBuB,EAAkB,GAmBtB,OAlBAN,EAAWP,SAAQ,YAAmB,IAAD,mBAAhBC,EAAgB,KAATC,EAAS,KACnC,GAAID,IAAUC,EAGZ,OAFAU,EAAcrB,OACdsB,EAAgBC,KAAK,WAKvB,IAFAD,EAAgBC,KAAhB,UAAwBtB,EAAWS,GAAnC,cAA+CT,EAAWU,KAEnDD,IAAUC,GACfU,EAAYT,IAAIF,KAChBA,EACY,KACVA,EAAQ,MAMP,aACLS,oBACAC,oBACAC,cACAC,mBACGJ,MC3CMhF,UAAMsB,MA7BrB,YAAuC,IAAjB2C,EAAgB,EAAhBA,OAAQ/C,EAAQ,EAARA,KACtBK,EAAWC,qBAAWtB,GACtBe,EAAQO,qBAAWzB,GAEnBuF,EAAYtD,mBAAQ,2BAASd,GAAT,OAAgB+C,KAAU,CAAC/C,EAAM+C,IAErDxC,EAAeC,uBACnB,SAACC,GACCJ,EAAS,CAAEL,KRZoB,wBQYSC,QAASmE,MAEnD,CAAC/D,EAAU+D,IAEPC,EAAWvD,mBAAQ,WACvB,OAAOf,EAAMR,cAAc6E,KAC1B,CAACrE,EAAMR,cAAe6E,IACzB,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACElD,GAAE,UAAKlB,EAAL,mBAAoB+C,GACtBpB,UAAU,kBACVK,QAASqC,IAAY,EACrBjD,SAAUb,SCZLzB,UAAMsB,MAbrB,YAAwC,IAAjB2C,EAAgB,EAAhBA,OAAQ/C,EAAQ,EAARA,KAC7B,OACE,6BACE,yBACEsE,IAAG,UAAKC,sBAAL,YAA+BvE,GAA/B,OAAsC+C,EACtCyB,WACAC,SAAS,EAAG,KAFZ,QAGHC,IAAI,SCaG5F,UAAMsB,MAlBrB,YAA0D,IAApCgD,EAAmC,EAAnCA,aAAcxD,EAAqB,EAArBA,kBAClC,OACE,yBAAK+B,UAAU,mBACZ1D,EAAOoD,KAAI,SAACC,EAAOC,GAAR,OACV,yBACEC,IAAKD,EACLI,UAAWgD,IAAW,eAAgB,CACpC,uBAAwBvB,EAAawB,IAAIrD,GACzC,wBAAyBA,IAAM3B,KAGhC0B,UCyBIxC,UAAMsB,MA/BrB,YAAqD,IAAjC6D,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,gBAC/B,OACE,6BACE,yBAAKvC,UAAU,kBACZzD,EAAemD,KAAI,SAACwD,EAAMtD,GAAP,OAClB,yBACEC,IAAKD,EACLI,UAAWgD,IAAW,cAAe,CACnC,sBAAuBV,EAAYW,IAAIrD,UAI7C,yBACEI,UAAU,sCACVC,MAAO,CACLkD,KACE,EAAIrG,EAAqBsG,KAAKC,MAAMrG,EAAuB,QAInE,yBAAKgD,UAAU,aACZuC,EAAgB7C,KAAI,SAAC4D,EAAM1D,GAAP,OACnB,yBAAKC,IAAKD,EAAGI,UAAU,oBACpBsD,WCoMEnG,UAAMsB,MA5MrB,WACE,IAAML,EAAQO,qBAAWzB,GAEnBqG,EAAuB1E,uBAC3B,SAAC4C,GAAD,OAAkBA,EAAawB,IAAI7E,EAAMH,qBACzC,CAACG,EAAMH,oBAGHuF,EAAyB3E,uBAC7B,SAAC4C,GAAD,OACEA,EAAawB,IAAI7E,EAAMH,qBACtBwD,EAAawB,IAjBpB,SAA2BQ,GACzB,IAAIC,EAAiBD,EAAa,EAElC,OADIC,EAAiB,KAAIA,EAAiB,GACnCA,EAceC,CAAkBvF,EAAMH,sBAC5C,CAACG,EAAMH,oBAEH2F,EAAkBzE,mBACtB,kBACE2C,EAAcpC,KACZ,gBAAG0C,EAAH,EAAGA,kBAAmBC,EAAtB,EAAsBA,kBAAsBF,EAA5C,+EACKA,EADL,CAEEV,af9BgC,+Be+B9BrD,EAAMJ,iBACFoE,EACAC,SAGZ,CAACjE,EAAMJ,mBAGH6F,EAAY1E,mBAAQ,WA0BxB,OAzBqByE,EAAgBE,QACnC,YAAqC,IAAlCrC,EAAiC,EAAjCA,aAAcL,EAAmB,EAAnBA,OAAQ/C,EAAW,EAAXA,KACnB0F,GAAY,EAoBhB,OAlBIA,GAAa3F,EAAML,af/CC,qBegDlBK,EAAML,WACRgG,EAAqB,SAAT1F,EfhDQ,qBeiDXD,EAAML,aACfgG,EAAqB,QAAT1F,IAIZ0F,GAAa3F,EAAMN,cfzDI,wBe0DrBM,EAAMN,YACRiG,EAAYR,EAAqB9B,Gf1DR,0Be2DhBrD,EAAMN,cACfiG,EAAYP,EAAuB/B,KAGnCsC,GAAa3F,EAAMP,aACrBkG,GAAa3F,EAAMR,cAAN,UAAuBS,GAAvB,OAA8B+C,KAEtC2C,OAIV,CACDH,EACAxF,EAAML,WACNK,EAAMN,YACNM,EAAMP,WACNO,EAAMR,cACN2F,EACAC,IAEIQ,EAAkBnF,uBACtB,YAAgB,IAAD,IAAZoF,EAAY,EAAZA,MACD,GAAIA,EAAQ,EAEV,MAAO,cAET,IAAMC,EAAqBX,EAAoB,UAC7CM,EAAUI,UADmC,aAC7C,EAAkBxC,cAGd0C,EAAuBX,EAAsB,UACjDK,EAAUI,UADuC,aACjD,EAAkBxC,cAGpB,OAAOuB,IAAW,OAAQ,CACxBoB,kBAAmBF,EACnBG,oBAAqBF,EACrBG,qBAAsBJ,MAG1B,CAACX,EAAsBC,EAAwBK,IAG3CU,EAAiB1F,uBACrB,gBAAGuC,EAAH,EAAGA,OAAQ/C,EAAX,EAAWA,KAAX,OAAsB,kBAAC,EAAD,CAAY+C,OAAQA,EAAQ/C,KAAMA,MACxD,IAEImG,EAAkB3F,uBACtB,gBAAGuC,EAAH,EAAGA,OAAQ/C,EAAX,EAAWA,KAAX,OAAsB,kBAAC,EAAD,CAAa+C,OAAQA,EAAQ/C,KAAMA,MACzD,IAGIoG,EAAe5F,uBACnB,gBAAGyD,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,gBAAhB,OACE,kBAAC,EAAD,CAAUD,YAAaA,EAAaC,gBAAiBA,MAEvD,IAGImC,EAAgB7F,uBACpB,gBAAG4C,EAAH,EAAGA,aAAH,OACE,kBAAC,EAAD,CACEA,aAAcA,EACdxD,kBAAmBG,EAAMH,sBAG7B,CAACG,EAAMH,oBAGH0G,EAAgB9F,uBAAY,qBAAGI,MAAkB2F,mBAAkB,IAEnEC,EAAU1F,mBACd,iBAAM,CACJ,CAAE2F,MAAO,eAAMzF,MAAO,GAAI0F,SAAUR,GACpC,CAAEO,MAAO,IAAKzF,MAAO,GAAI0F,SAAU,UACnC,CAAED,MAAO,UAAWC,SAAUP,GAC9B,CAAEM,MAAO,OAAQzF,MAAO,IAAK0F,SAAU,QACvC,CAAED,MAAO,QAASzF,MAAO,IAAK0F,SAAU,YACxC,CAAED,MAAO,OAAQzF,MAAO,GAAI0F,SAAU,eACtC,CAAED,MAAO,OAAQC,SAAUN,GAC3B,CAAEK,MAAO,QAASzF,MAAO,IAAK0F,SAAUL,GACxC,CAAEI,MAAO,QAASzF,MAAO,GAAI0F,SAAUJ,MAEzC,CACEJ,EACAG,EACAF,EACAG,EACAF,IAIEO,EAAenG,uBACnB,YAA4C,IAAzCoG,EAAwC,EAAxCA,YAAapF,EAA2B,EAA3BA,IAAKqF,EAAsB,EAAtBA,SAAUjF,EAAY,EAAZA,MAAY,EACb4E,EAAQI,GAA5BH,EADiC,EACjCA,MAAOC,EAD0B,EAC1BA,SACThD,EAAU8B,EAAUqB,EAAW,GACjCC,EAAQ,UAAMF,EAAN,aAAsBC,GAQlC,OAPiB,IAAbA,EACFC,EAAWL,EACkB,kBAAbC,EAChBI,EAAWpD,EAAQgD,GACU,oBAAbA,IAChBI,EAAWJ,EAAShD,IAGpB,yBACElC,IAAKA,EACLI,MAAOA,EACPD,UAAWgD,IAAWgB,EAAgB,CAAEC,MAAOiB,EAAW,IAAM,CAC9DE,WAA4B,IAAhBH,EACZI,YAA6B,IAAhBJ,GAAqC,IAAhBA,KAGnCE,KAIP,CAACN,EAASb,EAAiBH,IAGvByB,EAAiBzG,uBACrB,YAAgB,IAAboF,EAAY,EAAZA,MACD,OAAOY,EAAQZ,GAAO5E,OAAS,MAEjC,CAACwF,IAGGU,EAAe1G,uBAAY,YAAwC,EAArCoG,YAAqC,EAAxBpF,IAAyB,IAApBoE,EAAmB,EAAnBA,MAAmB,EAAZhE,MAE3D,OAAc,IAAVgE,EAAoB,GACjB,KACN,IAEH,OACE,kBAAC,IAAD,MACG,YAAwB,IAArB5E,EAAoB,EAApBA,MAAOmG,EAAa,EAAbA,OACT,OACE,kBAAC,IAAD,CACEC,sBAAoB,EACpBC,cAAe,EACfV,aAAcA,EACdW,YAAaL,EACbM,YAAaf,EAAQgB,OACrBL,OAAQA,EACRM,UAAWP,EACXQ,SAAUlC,EAAUgC,OAAS,EAC7BxG,MAAOA,EACP2G,2BAAyB,EACzBC,6BAA2B,EAI3BC,eAAgB,qB,OC9LbC,MAlBf,WAAgB,IAAD,EACaC,qBAAWlI,EAASP,GADjC,mBACNS,EADM,KACCM,EADD,KAEb,OACE,kBAACrB,EAAgBgJ,SAAjB,CAA0BpH,MAAOP,GAC/B,kBAACxB,EAAamJ,SAAd,CAAuBpH,MAAOb,GAC5B,yBAAK4B,UAAU,kBACb,yBAAKA,UAAU,sBACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,mBACb,kBAAC,EAAD,WCVQsG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8299c88b.chunk.js","sourcesContent":["const getNLengthArray = (n) => [...Array(n).keys()];\n\nexport const FULL_DAY_ARRAY = getNLengthArray(24);\n\nvar d = new Date();\nexport const CURRENT_MONTH_INDEX = d.getMonth();\nexport const CURRENT_HOUR_INDEX = d.getHours();\nexport const CURRENT_MINUTE_INDEX = d.getMinutes();\nexport const MONTH_FILTER_ACTIVE = 'MONTH_FILTER_ACTIVE';\nexport const MONTH_FILTER_EXPIRING = 'MONTH_FILTER_EXPIRING';\nexport const TYPE_FILTER_FISH = 'TYPE_FILTER_FISH';\nexport const TYPE_FILTER_BUGS = 'TYPE_FILTER_BUGS';\n\nexport const HEMISPHERE_FILTER_NORTHERN = 'HEMISPHERE_FILTER_NORTHERN';\nexport const HEMISPHERE_FILTER_SOUTHERN = 'HEMISPHERE_FILTER_SOUTHERN';\n","export const MONTHS = [\n  'Jan.',\n  'Feb.',\n  'Mar.',\n  'Apr.',\n  'May',\n  'June',\n  'July',\n  'Aug.',\n  'Sept.',\n  'Oct.',\n  'Nov.',\n  'Dec.',\n];\n","import React from 'react';\nimport {\n  CHANGE_PREVIEW_MONTH,\n  TOGGLE_CRITTER_CAUGHT,\n  TOGGLE_HIDE_CAUGHT,\n  CHANGE_MONTH_FILTER,\n  CHANGE_TYPE_FILTER,\n  CHANGE_HEMISPHERE,\n} from './actionTypes';\nimport {\n  CURRENT_MONTH_INDEX,\n  HEMISPHERE_FILTER_NORTHERN,\n} from '../components/constants';\n\nexport const StateContext = React.createContext();\nexport const DispatchContext = React.createContext();\n\nconst savedState = JSON.parse(localStorage.getItem('acnh_store')) || {};\n\nexport const initialState = {\n  // previewMonthIndex: CURRENT_MONTH_INDEX,\n  caughtCritter: {},\n  hideCaught: false,\n  monthFilter: '',\n  typeFilter: '',\n  hemisphereFilter: HEMISPHERE_FILTER_NORTHERN,\n  ...savedState,\n  // TODO: Don't reset the preview month from persisted store, since it's pretty confusing when you land on the wrong month after coming back\n  // Maybe can be solved be adding styles to denote you're previewing a month in the future\n  previewMonthIndex: CURRENT_MONTH_INDEX,\n};\n\nexport function reducer(previousState, { type, payload }) {\n  let state;\n  switch (type) {\n    case CHANGE_PREVIEW_MONTH:\n      state = { ...previousState, previewMonthIndex: payload };\n      break;\n    case TOGGLE_CRITTER_CAUGHT: {\n      //TODO maybe use thunks. So logic isn't in the reducer\n      const caughtCritter = { ...previousState.caughtCritter };\n      if (previousState.caughtCritter[payload]) {\n        delete caughtCritter[payload];\n      } else {\n        caughtCritter[payload] = true;\n      }\n      //TODO maybe throttle this with thunks\n      state = { ...previousState, caughtCritter };\n      break;\n    }\n    case TOGGLE_HIDE_CAUGHT: {\n      state = { ...previousState, hideCaught: !previousState.hideCaught };\n      break;\n    }\n    case CHANGE_MONTH_FILTER: {\n      state = { ...previousState, monthFilter: payload };\n      break;\n    }\n    case CHANGE_TYPE_FILTER: {\n      state = { ...previousState, typeFilter: payload };\n      break;\n    }\n    case CHANGE_HEMISPHERE: {\n      state = { ...previousState, hemisphereFilter: payload };\n      break;\n    }\n    default:\n      state = previousState;\n  }\n\n  if (state !== previousState) {\n    localStorage.setItem('acnh_store', JSON.stringify(state));\n  }\n  return state;\n}\n","export const CHANGE_PREVIEW_MONTH = 'CHANGE_PREVIEW_MONTH';\nexport const TOGGLE_CRITTER_CAUGHT = 'TOGGLE_CRITTER_CAUGHT';\nexport const TOGGLE_HIDE_CAUGHT = 'TOGGLE_HIDE_CAUGHT';\nexport const CHANGE_MONTH_FILTER = 'CHANGE_MONTH_FILTER';\nexport const CHANGE_TYPE_FILTER = 'CHANGE_TYPE_FILTER';\nexport const CHANGE_HEMISPHERE = 'CHANGE_HEMISPHERE';\n","import React, { useMemo, useContext, useCallback } from 'react';\nimport { MONTHS } from '../utility';\nimport { DispatchContext, StateContext } from '../../reducer';\nimport { CHANGE_PREVIEW_MONTH } from '../../reducer/actionTypes';\nimport { Box } from 'rebass';\nimport { Label, Select } from '@rebass/forms';\n\nfunction PreviewMonthSelect() {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const handleChange = useCallback(\n    (e) => {\n      const optionValue = e.target.value;\n      const payload = optionValue === '' ? null : parseInt(optionValue, 10);\n      dispatch({ type: CHANGE_PREVIEW_MONTH, payload });\n    },\n    [dispatch]\n  );\n\n  const value = useMemo(() => state.previewMonthIndex, [\n    state.previewMonthIndex,\n  ]);\n\n  return (\n    <Box p={1} width={[1, 1, 1 / 5]}>\n      <Label p={1} htmlFor=\"active_month\">\n        Active Month\n      </Label>\n      <Select\n        id=\"active_month\"\n        name=\"Active Month\"\n        value={value}\n        onChange={handleChange}\n      >\n        {MONTHS.map((month, i) => (\n          <option key={i} value={i}>\n            {month}\n          </option>\n        ))}\n        ))}\n      </Select>\n    </Box>\n  );\n}\n\nexport default React.memo(PreviewMonthSelect);\n","import React, { useMemo, useContext, useCallback } from 'react';\nimport { DispatchContext, StateContext } from '../../reducer';\nimport { Box } from 'rebass';\nimport { Label, Switch } from '@rebass/forms';\nimport { TOGGLE_HIDE_CAUGHT } from '../../reducer/actionTypes';\n\nfunction ToggleCaughtCheckbox() {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const handleClick = useCallback(() => {\n    dispatch({ type: TOGGLE_HIDE_CAUGHT });\n  }, [dispatch]);\n\n  const isChecked = useMemo(() => state.hideCaught, [state.hideCaught]);\n  return (\n    <Box p={1} width={[1, 1, 1 / 5]} className=\"toggle_caught_container\">\n      <Label\n        htmlFor=\"hide_caught\"\n        style={{ paddingTop: 4, display: 'block', textAlign: 'center' }}\n      >\n        Hide Caught\n      </Label>\n      <div className=\"toggle_caught_switch\">\n        <Switch id=\"hide_caught\" checked={isChecked} onClick={handleClick} />\n      </div>\n    </Box>\n  );\n}\n\nexport default React.memo(ToggleCaughtCheckbox);\n","import React, { useContext, useCallback } from 'react';\nimport { DispatchContext, StateContext } from '../../reducer';\nimport { CHANGE_MONTH_FILTER } from '../../reducer/actionTypes';\nimport { Box } from 'rebass';\nimport { Label, Select } from '@rebass/forms';\nimport { MONTH_FILTER_ACTIVE, MONTH_FILTER_EXPIRING } from '../constants';\n\nfunction ToggleActiveExpiringSelect() {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const handleChange = useCallback(\n    (e) => {\n      dispatch({ type: CHANGE_MONTH_FILTER, payload: e.target.value });\n    },\n    [dispatch]\n  );\n\n  return (\n    <Box\n      p={1}\n      width={[1, 1, 1 / 5]}\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <Label p={1} htmlFor=\"month_filter\" style={{ flexGrow: 1 }}>\n        Month\n      </Label>\n      <Select\n        id=\"month_filter\"\n        name=\"Month Filter\"\n        value={state.monthFilter}\n        onChange={handleChange}\n      >\n        <option key=\"all\" value=\"\">\n          All\n        </option>\n        <option key=\"active\" value={MONTH_FILTER_ACTIVE}>\n          Active\n        </option>\n        <option key=\"expiring\" value={MONTH_FILTER_EXPIRING}>\n          Expiring\n        </option>\n      </Select>\n    </Box>\n  );\n}\n\nexport default React.memo(ToggleActiveExpiringSelect);\n","import React, { useContext, useCallback } from 'react';\nimport { DispatchContext, StateContext } from '../../reducer';\nimport { CHANGE_TYPE_FILTER } from '../../reducer/actionTypes';\nimport { Box } from 'rebass';\nimport { Label, Select } from '@rebass/forms';\nimport { TYPE_FILTER_FISH, TYPE_FILTER_BUGS } from '../constants';\n\nfunction ToggleTypeSelect() {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const handleChange = useCallback(\n    (e) => {\n      dispatch({ type: CHANGE_TYPE_FILTER, payload: e.target.value });\n    },\n    [dispatch]\n  );\n\n  return (\n    <Box\n      p={1}\n      width={[1, 1, 1 / 5]}\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <Label p={1} htmlFor=\"type_filter\" style={{ flexGrow: 1 }}>\n        Type\n      </Label>\n      <Select\n        id=\"type_filter\"\n        name=\"Type Filter\"\n        value={state.typeFilter}\n        onChange={handleChange}\n      >\n        <option key=\"all\" value=\"\">\n          All\n        </option>\n        <option key=\"active\" value={TYPE_FILTER_FISH}>\n          Fish\n        </option>\n        <option key=\"expiring\" value={TYPE_FILTER_BUGS}>\n          Bugs\n        </option>\n      </Select>\n    </Box>\n  );\n}\n\nexport default React.memo(ToggleTypeSelect);\n","import React, { useContext, useCallback } from 'react';\nimport { DispatchContext, StateContext } from '../../reducer';\nimport { CHANGE_HEMISPHERE } from '../../reducer/actionTypes';\nimport { Box } from 'rebass';\nimport { Label, Select } from '@rebass/forms';\nimport {\n  HEMISPHERE_FILTER_NORTHERN,\n  HEMISPHERE_FILTER_SOUTHERN,\n} from '../constants';\n\nfunction ToggleHemisphere() {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const handleChange = useCallback(\n    (e) => {\n      dispatch({ type: CHANGE_HEMISPHERE, payload: e.target.value });\n    },\n    [dispatch]\n  );\n\n  return (\n    <Box\n      p={1}\n      width={[1, 1, 1 / 5]}\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <Label\n        p={1}\n        htmlFor=\"hemisphere_filter\"\n        style={{ flexGrow: 1, hyphens: 'auto' }}\n      >\n        Hemisphere\n      </Label>\n      <Select\n        id=\"hemisphere_filter\"\n        name=\"Hemisphere Filter\"\n        value={state.hemisphereFilter}\n        onChange={handleChange}\n      >\n        <option key=\"active\" value={HEMISPHERE_FILTER_NORTHERN}>\n          Northern\n        </option>\n        <option key=\"expiring\" value={HEMISPHERE_FILTER_SOUTHERN}>\n          Southern\n        </option>\n      </Select>\n    </Box>\n  );\n}\n\nexport default React.memo(ToggleHemisphere);\n","import React from 'react';\n\nimport PreviewMonthSelect from './control-elements/PreviewMonthSelect';\nimport ToggleCaughtCheckbox from './control-elements/ToggleCaughtCheckbox';\nimport ToggleActiveExpiringSelect from './control-elements/ToggleActiveExpiringSelect';\nimport ToggleTypeSelect from './control-elements/ToggleTypeSelect';\nimport ToggleHemisphere from './control-elements/ToggleHemisphere';\n\nfunction Controls() {\n  return (\n    <React.Fragment>\n      <PreviewMonthSelect />\n      <ToggleCaughtCheckbox />\n      <ToggleActiveExpiringSelect />\n      <ToggleTypeSelect />\n      <ToggleHemisphere />\n    </React.Fragment>\n  );\n}\n\nexport default React.memo(Controls);\n","const getNLengthArray = (n) => [...Array(n).keys()];\n\nconst fishData = require('../fish_data.json');\nconst bugData = require('../bug_data.json');\nconst FULL_YEAR_SET = new Set(getNLengthArray(12));\nconst FULL_DAY_ARRAY = getNLengthArray(24);\nconst FULL_DAY_SET = new Set(FULL_DAY_ARRAY);\n\nfunction formatTime(hourIndex) {\n  let number = hourIndex % 12;\n  number = number || 12;\n\n  const suffix = hourIndex / 12 < 1 ? 'AM' : 'PM';\n  return `${number}${suffix}`;\n}\n\nfunction calculateActiveMonths(monthTuples, isSouth) {\n  let activeMonths = new Set();\n  monthTuples.forEach(([start, end]) => {\n    //TODO convert monthTuple to start at 0 so we don't have to do this dumb stuff\n    if (isSouth) {\n      start = (start + 6) % 12;\n      if (start === 0) start = 12;\n      end = (end + 6) % 12;\n      if (end === 0) end = 12;\n    }\n    if (start === 1 && end === 12) {\n      activeMonths = FULL_YEAR_SET;\n      return;\n    }\n\n    while (start !== end) {\n      activeMonths.add(start - 1);\n      start++;\n      if (start > 12) {\n        start = 1;\n      }\n    }\n\n    activeMonths.add(end - 1);\n  });\n\n  return activeMonths;\n}\n\nconst formattedData = fishData\n  .map((rowData) => ({ ...rowData, type: 'fish' }))\n  .concat(bugData.map((rowData) => ({ ...rowData, type: 'bug' })))\n  .map(({ month: monthTuples, time: timeTuples, ...rest }) => {\n    const activeMonthsNorth = calculateActiveMonths(monthTuples, false);\n    const activeMonthsSouth = calculateActiveMonths(monthTuples, true);\n\n    let activeHours = new Set();\n    let activeHoursText = [];\n    timeTuples.forEach(([start, end]) => {\n      if (start === end) {\n        activeHours = FULL_DAY_SET;\n        activeHoursText.push('All Day');\n        return;\n      }\n      activeHoursText.push(`${formatTime(start)} - ${formatTime(end)}`);\n\n      while (start !== end) {\n        activeHours.add(start);\n        start++;\n        if (start > 23) {\n          start = 0;\n        }\n      }\n      // don't include end for time\n    });\n\n    return {\n      activeMonthsNorth,\n      activeMonthsSouth,\n      activeHours,\n      activeHoursText,\n      ...rest,\n    };\n  });\n\nexport default formattedData;\n","import React, { useMemo, useContext, useCallback } from 'react';\nimport { DispatchContext, StateContext } from '../../reducer';\nimport { TOGGLE_CRITTER_CAUGHT } from '../../reducer/actionTypes';\nimport { Label, Checkbox } from '@rebass/forms';\n\nfunction CaughtCell({ number, type }) {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  const caughtKey = useMemo(() => `${type}${number}`, [type, number]);\n\n  const handleChange = useCallback(\n    (e) => {\n      dispatch({ type: TOGGLE_CRITTER_CAUGHT, payload: caughtKey });\n    },\n    [dispatch, caughtKey]\n  );\n  const isCaught = useMemo(() => {\n    return state.caughtCritter[caughtKey];\n  }, [state.caughtCritter, caughtKey]);\n  return (\n    <div>\n      <Label>\n        <Checkbox\n          id={`${type}_caught_${number}`}\n          className=\"caught_checkbox\"\n          checked={isCaught || false}\n          onChange={handleChange}\n        />\n      </Label>\n    </div>\n  );\n}\n\nexport default React.memo(CaughtCell);\n","import React from 'react';\n\nfunction PictureCell({ number, type }) {\n  return (\n    <div>\n      <img\n        src={`${process.env.PUBLIC_URL}/${type}${number\n          .toString()\n          .padStart(2, '0')}.png`}\n        alt=\"\"\n      />\n    </div>\n  );\n}\n\nexport default React.memo(PictureCell);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { MONTHS } from '../utility';\n\nfunction MonthsCell({ activeMonths, previewMonthIndex }) {\n  return (\n    <div className=\"month_container\">\n      {MONTHS.map((month, i) => (\n        <div\n          key={i}\n          className={classNames('month_square', {\n            'month_square--active': activeMonths.has(i),\n            'month_square--current': i === previewMonthIndex,\n          })}\n        >\n          {month}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default React.memo(MonthsCell);\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport {\n  FULL_DAY_ARRAY,\n  CURRENT_HOUR_INDEX,\n  CURRENT_MINUTE_INDEX,\n} from '../constants';\n\nfunction TimeCell({ activeHours, activeHoursText }) {\n  return (\n    <div>\n      <div className=\"hour_container\">\n        {FULL_DAY_ARRAY.map((hour, i) => (\n          <div\n            key={i}\n            className={classNames('hour_square', {\n              'hour_square--active': activeHours.has(i),\n            })}\n          />\n        ))}\n        <div\n          className=\"hour_container__current_time_marker\"\n          style={{\n            left:\n              4 * CURRENT_HOUR_INDEX + Math.floor(CURRENT_MINUTE_INDEX / 15),\n          }}\n        />\n      </div>\n      <div className=\"hour_text\">\n        {activeHoursText.map((text, i) => (\n          <div key={i} className=\"hour_text__entry\">\n            {text}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(TimeCell);\n","import React, { useContext, useMemo, useCallback } from 'react';\nimport { AutoSizer, MultiGrid } from 'react-virtualized';\nimport classNames from 'classnames';\nimport formattedData from './formatted-data';\n\nimport { StateContext } from '../reducer';\nimport CaughtCell from './cells/CaughtCell';\nimport {\n  MONTH_FILTER_ACTIVE,\n  MONTH_FILTER_EXPIRING,\n  TYPE_FILTER_FISH,\n  TYPE_FILTER_BUGS,\n  HEMISPHERE_FILTER_NORTHERN,\n} from './constants';\nimport PictureCell from './cells/PictureCell';\nimport MonthsCell from './cells/MonthsCell';\nimport TimeCell from './cells/TimeCell';\n\nfunction getNextMonthIndex(monthIndex) {\n  let nextMonthIndex = monthIndex + 1;\n  if (nextMonthIndex > 11) nextMonthIndex = 0;\n  return nextMonthIndex;\n}\n\nfunction CritterTable() {\n  const state = useContext(StateContext);\n\n  const isCurrentMonthActive = useCallback(\n    (activeMonths) => activeMonths.has(state.previewMonthIndex),\n    [state.previewMonthIndex]\n  );\n\n  const isCurrentMonthExpiring = useCallback(\n    (activeMonths) =>\n      activeMonths.has(state.previewMonthIndex) &&\n      !activeMonths.has(getNextMonthIndex(state.previewMonthIndex)),\n    [state.previewMonthIndex]\n  );\n  const localeAwareData = useMemo(\n    () =>\n      formattedData.map(\n        ({ activeMonthsNorth, activeMonthsSouth, ...rest }) => ({\n          ...rest,\n          activeMonths:\n            state.hemisphereFilter === HEMISPHERE_FILTER_NORTHERN\n              ? activeMonthsNorth\n              : activeMonthsSouth,\n        })\n      ),\n    [state.hemisphereFilter]\n  );\n\n  const tableData = useMemo(() => {\n    const filteredData = localeAwareData.filter(\n      ({ activeMonths, number, type }) => {\n        let displayed = true;\n\n        if (displayed && state.typeFilter) {\n          if (state.typeFilter === TYPE_FILTER_FISH) {\n            displayed = type === 'fish';\n          } else if (state.typeFilter === TYPE_FILTER_BUGS) {\n            displayed = type === 'bug';\n          }\n        }\n\n        if (displayed && state.monthFilter) {\n          if (state.monthFilter === MONTH_FILTER_ACTIVE) {\n            displayed = isCurrentMonthActive(activeMonths);\n          } else if (state.monthFilter === MONTH_FILTER_EXPIRING) {\n            displayed = isCurrentMonthExpiring(activeMonths);\n          }\n        }\n        if (displayed && state.hideCaught) {\n          displayed = !state.caughtCritter[`${type}${number}`];\n        }\n        return displayed;\n      }\n    );\n    return filteredData;\n  }, [\n    localeAwareData,\n    state.typeFilter,\n    state.monthFilter,\n    state.hideCaught,\n    state.caughtCritter,\n    isCurrentMonthActive,\n    isCurrentMonthExpiring,\n  ]);\n  const getRowClassName = useCallback(\n    ({ index }) => {\n      if (index < 0) {\n        //header;\n        return 'header_cell';\n      }\n      const currentMonthActive = isCurrentMonthActive(\n        tableData[index]?.activeMonths\n      );\n\n      const currentMonthExpiring = isCurrentMonthExpiring(\n        tableData[index]?.activeMonths\n      );\n\n      return classNames('cell', {\n        cell_month_active: currentMonthActive,\n        cell_month_expiring: currentMonthExpiring,\n        cell_month_inactive: !currentMonthActive,\n      });\n    },\n    [isCurrentMonthActive, isCurrentMonthExpiring, tableData]\n  );\n\n  const caughtRenderer = useCallback(\n    ({ number, type }) => <CaughtCell number={number} type={type} />,\n    []\n  );\n  const pictureRenderer = useCallback(\n    ({ number, type }) => <PictureCell number={number} type={type} />,\n    []\n  );\n\n  const timeRenderer = useCallback(\n    ({ activeHours, activeHoursText }) => (\n      <TimeCell activeHours={activeHours} activeHoursText={activeHoursText} />\n    ),\n    []\n  );\n\n  const monthRenderer = useCallback(\n    ({ activeMonths }) => (\n      <MonthsCell\n        activeMonths={activeMonths}\n        previewMonthIndex={state.previewMonthIndex}\n      />\n    ),\n    [state.previewMonthIndex]\n  );\n\n  const priceRenderer = useCallback(({ value }) => value.toLocaleString(), []);\n\n  const columns = useMemo(\n    () => [\n      { label: '🎣', width: 30, renderer: caughtRenderer },\n      { label: '#', width: 30, renderer: 'number' },\n      { label: 'Picture', renderer: pictureRenderer },\n      { label: 'Name', width: 110, renderer: 'name' },\n      { label: 'Where', width: 110, renderer: 'location' },\n      { label: 'Size', width: 50, renderer: 'shadow_size' },\n      { label: 'Time', renderer: timeRenderer },\n      { label: 'Month', width: 180, renderer: monthRenderer },\n      { label: 'Price', width: 60, renderer: priceRenderer },\n    ],\n    [\n      caughtRenderer,\n      monthRenderer,\n      pictureRenderer,\n      priceRenderer,\n      timeRenderer,\n    ]\n  );\n\n  const cellRenderer = useCallback(\n    ({ columnIndex, key, rowIndex, style }) => {\n      const { label, renderer } = columns[columnIndex];\n      const rowData = tableData[rowIndex - 1];\n      let contents = `${columnIndex}, ${rowIndex}`;\n      if (rowIndex === 0) {\n        contents = label;\n      } else if (typeof renderer === 'string') {\n        contents = rowData[renderer];\n      } else if (typeof renderer === 'function') {\n        contents = renderer(rowData);\n      }\n      return (\n        <div\n          key={key}\n          style={style}\n          className={classNames(getRowClassName({ index: rowIndex - 1 }), {\n            cell_first: columnIndex === 0,\n            cell_padded: columnIndex === 3 || columnIndex === 4,\n          })}\n        >\n          {contents}\n        </div>\n      );\n    },\n    [columns, getRowClassName, tableData]\n  );\n\n  const getColumnWidth = useCallback(\n    ({ index }) => {\n      return columns[index].width || 120;\n    },\n    [columns]\n  );\n\n  const getRowHeight = useCallback(({ columnIndex, key, index, style }) => {\n    // Header\n    if (index === 0) return 30;\n    return 95;\n  }, []);\n\n  return (\n    <AutoSizer>\n      {({ width, height }) => {\n        return (\n          <MultiGrid\n            enableFixedRowScroll\n            fixedRowCount={1}\n            cellRenderer={cellRenderer}\n            columnWidth={getColumnWidth}\n            columnCount={columns.length}\n            height={height}\n            rowHeight={getRowHeight}\n            rowCount={tableData.length + 1}\n            width={width}\n            hideTopRightGridScrollbar\n            hideBottomLeftGridScrollbar\n            // Rerender, for some reason, only happens if row count changes. This is needed\n            // to force a rerender when switching from fish to bugs with the same count\n            // https://github.com/bvaughn/react-virtualized/issues/1262#issuecomment-561966273\n            onRowsRendered={() => {}}\n          />\n        );\n      }}\n    </AutoSizer>\n  );\n}\n\nexport default React.memo(CritterTable);\n","import React, { useReducer } from 'react';\nimport Controls from './components/Controls';\nimport CritterTable from './components/CritterTable';\nimport './App.css';\n\nimport {\n  reducer,\n  initialState,\n  DispatchContext,\n  StateContext,\n} from './reducer';\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <DispatchContext.Provider value={dispatch}>\n      <StateContext.Provider value={state}>\n        <div className=\"root_container\">\n          <div className=\"controls_container\">\n            <Controls />\n          </div>\n          <div className=\"table_container\">\n            <CritterTable />\n          </div>\n        </div>\n      </StateContext.Provider>\n    </DispatchContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}